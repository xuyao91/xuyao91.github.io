<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[深不可测]]></title>
  <link href="http://xuyao.club/atom.xml" rel="self"/>
  <link href="http://xuyao.club/"/>
  <updated>2016-04-25T22:40:13+08:00</updated>
  <id>http://xuyao.club/</id>
  <author>
    <name><![CDATA[Peter Xu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[About Sso in Rails]]></title>
    <link href="http://xuyao.club/blog/2016/04/06/about-sso-in-rails/"/>
    <updated>2016-04-06T16:19:32+08:00</updated>
    <id>http://xuyao.club/blog/2016/04/06/about-sso-in-rails</id>
    <content type="html"><![CDATA[<h3>前言</h3>

<p>目前业务越来越多，很多业务可能需要拆分成不同的应用，不同的应用之间如何互享用户信息，这时就需要用到单点登录(Single Sign On），简称为 SSO。</p>

<p>这里主要针对doorkeeper作讲解</p>

<!-- more -->


<p><img src="http://i2.piimg.com/285bc33bd4eab4b1.png" alt="查看图" /></p>

<h3>需要用到的插件</h3>

<ul>
<li><a href="https://github.com/doorkeeper-gem/doorkeeper">Doorkeeper</a>  (<a href="http://oauth.net/2/">Oauth 2.0</a>协议的认证授权服务)</li>
<li>Grape (提供 Resource Server APi)</li>
<li>Devise (提供登录，暂时可能用不到)</li>
</ul>


<h3>需要用到的角色</h3>

<ul>
<li>Resource Owner (用户角色)</li>
<li>Clients (第三方角色)</li>
<li>Authorization Server (授权服务)</li>
<li>Resource Server (用户信息读写服务,api形式)<br/>
详情可查看<a href="https://github.com/jeansfish/RFC6749.zh-cn/blob/master/Section01/1.1.md">RFC6749</a></li>
</ul>


<h3>Authorization Server构建</h3>

<p>安装doorkeeper及初始模型的建立</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;doorkeeper&#39;</span>
</span><span class='line'><span class="c1">#bundle install</span>
</span><span class='line'><span class="n">rails</span> <span class="n">generate</span> <span class="ss">doorkeeper</span><span class="p">:</span><span class="n">install</span>
</span><span class='line'><span class="n">rails</span> <span class="n">generate</span> <span class="ss">doorkeeper</span><span class="p">:</span><span class="n">migration</span>
</span><span class='line'><span class="n">rake</span> <span class="ss">db</span><span class="p">:</span><span class="n">migrate</span>
</span></code></pre></td></tr></table></div></figure>


<p>配置doorkeeper来提供resource_owner的model及授权</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Doorkeeper</span><span class="o">.</span><span class="n">configure</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">resource_owner_authenticator</span> <span class="k">do</span>
</span><span class='line'>    <span class="no">Patient</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="nb">id</span><span class="p">:</span> <span class="n">session</span><span class="o">[</span><span class="ss">:patient_id</span><span class="o">]</span><span class="p">,</span> <span class="ss">authentication_token</span><span class="p">:</span> <span class="n">session</span><span class="o">[</span><span class="ss">:patient_auth_token</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">first</span> <span class="o">||</span> <span class="n">redirect_to</span><span class="p">(</span><span class="n">login_url</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面操作会生成下面几张表</p>

<ul>
<li>oauth_applications  第三方(clients)表</li>
<li>oauth_access_grants 用户授权code表</li>
<li>oauth_access_tokens 授权服务token表</li>
</ul>


<h3>添加 Applications</h3>

<p>授权前需要添加第三方应用的信息，doorkeeper提供了一个增加Clients的功能
<a href="http://localhost:3001/oauth/applications">点击查看</a></p>

<h3>Authorization Grant Code Flow</h3>

<ul>
<li> Resource Owner请求Client的Redirection URI</li>
<li> Client转到Authorization Server</li>
<li> Resource Owner 确认授权</li>
<li> Authorization Server验证用户</li>
<li> Authorization Server返回Authorization Code</li>
<li> Resource Owner返回Redirection URI &amp; Authorization Code</li>
<li> Client拿到Authorization Code请求Access Token</li>
</ul>


<p>具体<a href="https://tools.ietf.org/ht%EF%BC%8Cml/draft-ietf-oauth-v2-22#section-4.1">点击查看</a></p>

<h3>获取Access Token</h3>

<p>上面介绍了oauth 2的授权流程，得到Client信息后，就可以去Authorization Server获取Token,通过调用/oauth/token接口获得Token<br/>
具体可以看  <a href="http://localhost:3001/oauth/applications">模拟操作</a></p>

<h3>Resource Server构建</h3>

<p>使用grape作Resource Server的接口,暂时可能需要如下接口</p>

<p>1，获取用户信息<br/>
2，修改用户信息<br/>
查看swagger<a href="http://localhost:3001/documentation/api_v1">模拟操作</a></p>

<h3>说明及问题</h3>

<ol>
<li>把Authorization Server部署在哪里

<blockquote><p>部署在主项目里面，这样可以省去Authorization Server的登录，因为App登录后，Authorization Server可以通过session获得用户信息</p></blockquote></li>
<li>目前只在App内授权，不提供外部登录

<blockquote><p>我们的其它应用都是App内的页面，而且在外部有些可能不能用，所以在App里授权</p></blockquote></li>
<li>Api部分可以不做验证</li>
</ol>


<h4>参考资料</h4>

<p><a href="https://github.com/doorkeeper-gem/doorkeeper">https://github.com/doorkeeper-gem/doorkeeper</a><br/>
<a href="https://github.com/sethherr/grape-doorkeeper">https://github.com/sethherr/grape-doorkeeper</a><br/>
<a href="https://blog.yorkxin.org/posts/2013/10/10/oauth2-tutorial-grape-api-doorkeeper/">https://blog.yorkxin.org/posts/2013/10/10/oauth2-tutorial-grape-api-doorkeeper/</a><br/>
<a href="http://tools.ietf.org/html/rfc6749">http://tools.ietf.org/html/rfc6749</a> <br/>
<a href="https://github.com/jeansfish/RFC6749.zh-cn">https://github.com/jeansfish/RFC6749.zh-cn</a><br/>
<a href="https://ruby-china.org/topics/15396">https://ruby-china.org/topics/15396</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[About Rails Cache]]></title>
    <link href="http://xuyao.club/blog/2016/03/24/about-rails-cache/"/>
    <updated>2016-03-24T10:05:39+08:00</updated>
    <id>http://xuyao.club/blog/2016/03/24/about-rails-cache</id>
    <content type="html"><![CDATA[<p>在项目中经常会存储一些短时候内比较重要的数据，或者一些临时数据，这种数据以前一般我都把它
存到redis中，后来想想如果不是很重要的临时数据就没必要往redis里放了，直接用cache可能更方便</p>

<h3>ActiveSupport::Cache::Store</h3>

<p>它是一个抽象类，有很多cache store的实现
rails中的这个类提供了和缓存交互的很多基本的方法，包括(read,write,delete,exist?,fetch)，下面说下具体实现</p>

<h3>ActiveSupport::Cache::FileStore</h3>

<p>先说一下FileStore,这种存储方式Rails默认的存储方式，他是将数据存储到系统文件,默认将文件存储到项目的/tmp/cache下面，你可以修改它的存储路径</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">cache_store</span> <span class="o">=</span> <span class="ss">:file_store</span><span class="p">,</span> <span class="s2">&quot;/path/to/cache/directory&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面说FileStore是Rails默认的存储方式，看下面这句代码就知道了</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Rails</span><span class="o">.</span><span class="n">cache</span><span class="o">.</span><span class="n">class</span>  <span class="o">=&gt;</span> <span class="no">ActiveSupport</span><span class="o">::</span><span class="no">Cache</span><span class="o">::</span><span class="no">FileStore</span>
</span></code></pre></td></tr></table></div></figure>


<!-- more -->


<p>cache有几种常用的方法</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Rails</span><span class="o">.</span><span class="n">cache</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s2">&quot;name&quot;</span><span class="p">,</span><span class="s2">&quot;peter&quot;</span><span class="p">)</span>
</span><span class='line'><span class="no">Rails</span><span class="o">.</span><span class="n">cache</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="s2">&quot;name&quot;</span><span class="p">)</span>  <span class="o">=&gt;</span> <span class="s2">&quot;peter&quot;</span>
</span><span class='line'><span class="no">Rails</span><span class="o">.</span><span class="n">cache</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="s2">&quot;age&quot;</span><span class="p">)</span>  <span class="o">=&gt;</span> <span class="kp">nil</span>
</span></code></pre></td></tr></table></div></figure>


<p>cache中的key都是string型，而且区分大小写的，Hash和数据也或以当作key,上面的代码的key也可以用hash表示</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Rails</span><span class="o">.</span><span class="n">cache</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="ss">:name</span><span class="p">)</span>  <span class="o">=&gt;</span> <span class="s2">&quot;peter&quot;</span>
</span><span class='line'><span class="no">Rails</span><span class="o">.</span><span class="n">cache</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="ss">:name</span><span class="p">)</span> <span class="o">==</span> <span class="no">Rails</span><span class="o">.</span><span class="n">cache</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="s2">&quot;name&quot;</span><span class="p">)</span>  <span class="o">=&gt;</span> <span class="kp">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果你的cache是和其它程序公用的存储，你可以给他定义一个namespace，一旦namespace定义，就会在key前面加了个前缀
其它一些参数
:compress 是否压缩缓存，
:compress_threshold 和compress一起使用，设定一个阈值，低于这个值就不压缩缓存。默认为 16 KB。
:expires_in 为缓存记录设定一个过期时间，单位为秒，过期后把记录从缓存中删除。</p>

<h3>ActiveSupport::Cache::MemoryStore</h3>

<p>这种存储方式是把数据存储在内存中，而且存储空间的大小由:size决定，默认为32M，如果超出分配的大小，系统会清理缓存，把最不常使用的记录删除。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">cache</span> <span class="o">=</span> <span class="no">ActiveSupport</span><span class="o">::</span><span class="no">Cache</span><span class="o">::</span><span class="no">MemoryStore</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">cache</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s2">&quot;name&quot;</span><span class="p">,</span><span class="s2">&quot;peter&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">cache</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="s2">&quot;name&quot;</span><span class="p">)</span>  <span class="o">=&gt;</span> <span class="s2">&quot;peter&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>ActiveSupport::Cache::MemCacheStore</h3>

<p>这种存储方式使用 Danga 开发的 memcached 服务器，为程序提供一个中心化的缓存存储。Rails 默认使用附带安装的 dalli gem 实现这种存储方式。这是目前在生产环境中使用最广泛的缓存存储方式，可以提供单个缓存存储，或者共享的缓存集群，性能高，冗余度低。</p>

<p>初始化时要指定集群中所有 memcached 服务器的地址。如果没有指定地址，默认运行在本地主机的默认端口上，这对大型网站来说不是个好主意。</p>

<p>在这种缓存存储中使用 write 和 fetch 方法还可指定两个额外的选项，充分利用 memcached 的特有功能。指定 :raw 选项可以直接把没有序列化的数据传给 memcached 服务器。在这种类型的数据上可以使用 memcached 的原生操作，例如 increment 和 decrement。如果不想让 memcached 覆盖已经存在的记录，可以指定 :unless_exist 选项。
上面的这种我也没用过，只是摘了别人一段话来补补。。。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby中include和extend的比较]]></title>
    <link href="http://xuyao.club/blog/2015/06/29/include-vs-extend-in-ruby/"/>
    <updated>2015-06-29T12:21:35+08:00</updated>
    <id>http://xuyao.club/blog/2015/06/29/include-vs-extend-in-ruby</id>
    <content type="html"><![CDATA[<p>本文翻译,改编自<a href="http://www.railstips.org/blog/archives/2009/05/15/include-vs-extend-in-ruby/">Include vs Extend in Ruby</a></p>

<p>在类中引用一个模块,有两种方式,一种是include,另一种是extend,两种的大致区别就是:<br/>
<strong><em>include是给class增加一个实例方法,而extend是增加一个类方法</em>  </strong><br/>
我们看一下小例子.</p>

<!-- more -->


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Foo</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">foo</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s1">&#39;heyyyyoooo!&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Bar</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Foo</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Bar</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">foo</span> <span class="c1"># heyyyyoooo!</span>
</span><span class='line'><span class="no">Bar</span><span class="o">.</span><span class="n">foo</span> <span class="c1"># NoMethodError: undefined method ‘foo’ for Bar:Class</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Baz</span>
</span><span class='line'>  <span class="kp">extend</span> <span class="no">Foo</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Baz</span><span class="o">.</span><span class="n">foo</span> <span class="c1"># heyyyyoooo!</span>
</span><span class='line'><span class="no">Baz</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">foo</span> <span class="c1"># NoMethodError: undefined method ‘foo’ for #&lt;Baz:0x1e708&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>如你所见,include生成了一个类的实例foo方法,而extend生成了一个类本身的类方法.</p>

<h5>Include 例子</h5>

<p>如果你想了解更多module之间使用include共享方法,你可以阅读我另一则文章在<a href="http://railstips.org/2009/4/20/how-to-add-simple-permissions-into-your-simple-app-also-thoughtbot-rules">how I added simple permissions</a>,那篇文章中permissions模块被好几个models引入,所以可以共享方法,这就是我要说的,所以你想了解更多可以查看那篇文章</p>

<h5>一个普遍的共识</h5>

<p>虽然include是增加一个实例方法,但是有一个普遍的共识,你以后会明白在ruby中使用include即可以增加类方法也可以增加实例方法,原因就是include有一个self.included的钩子方法,你可以用它来修改类中对于模块的引入,据我所知,extend没有钩子方法(这是作者错误的想法,见下面说明),不过这是有争议的,但是因为经常使用所以我想我会提到它,让我们看个小例子</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Foo</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">included</span><span class="p">(</span><span class="n">base</span><span class="p">)</span>
</span><span class='line'>    <span class="n">base</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span><span class="no">ClassMethods</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">module</span> <span class="nn">ClassMethods</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">bar</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s1">&#39;class method&#39;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">foo</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s1">&#39;instance method&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Baz</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Foo</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Baz</span><span class="o">.</span><span class="n">bar</span> <span class="c1"># class method</span>
</span><span class='line'><span class="no">Baz</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">foo</span> <span class="c1"># instance method</span>
</span><span class='line'><span class="no">Baz</span><span class="o">.</span><span class="n">foo</span> <span class="c1"># NoMethodError: undefined method ‘foo’ for Baz:Class</span>
</span><span class='line'><span class="no">Baz</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">bar</span> <span class="c1"># NoMethodError: undefined method ‘bar’ for #&lt;Baz:0x1e3d4&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>但是rails现在引入了<a href="http://api.rubyonrails.org/classes/ActiveSupport/Concern.html">ActiveSupport::Concern</a>,上面的方法就可以写成这样</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Foo</span>
</span><span class='line'>  <span class="kp">extend</span> <span class="no">ActiveSupport</span><span class="o">::</span><span class="no">Concern</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">module</span> <span class="nn">ClassMethods</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">bar</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s1">&#39;class method&#39;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">foo</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s1">&#39;instance method&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Baz</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Foo</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Baz</span><span class="o">.</span><span class="n">bar</span> <span class="c1"># class method</span>
</span><span class='line'><span class="no">Baz</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">foo</span> <span class="c1"># instance method</span>
</span><span class='line'><span class="no">Baz</span><span class="o">.</span><span class="n">foo</span> <span class="c1"># NoMethodError: undefined method ‘foo’ for Baz:Class</span>
</span><span class='line'><span class="no">Baz</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">bar</span> <span class="c1"># NoMethodError: undefined method ‘bar’ for #&lt;Baz:0x1e3d4&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h5>说明</h5>

<p>上面原作者说extend没有hook是错误的,extend其实有一个叫self.extended的方法,作用和include中的self.included是差不多的,可看下面的例子</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Foo</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">extended</span><span class="p">(</span><span class="n">klass</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;extended by class </span><span class="si">#{</span><span class="n">klass</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Baz</span>
</span><span class='line'>  <span class="kp">extend</span> <span class="no">Foo</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="o">=&gt;</span> <span class="n">extended</span> <span class="n">by</span> <span class="k">class</span> <span class="nc">Baz</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[About Me]]></title>
    <link href="http://xuyao.club/blog/2015/06/05/about-me-with-ruby-code/"/>
    <updated>2015-06-05T10:49:54+08:00</updated>
    <id>http://xuyao.club/blog/2015/06/05/about-me-with-ruby-code</id>
    <content type="html"><![CDATA[<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Person</span>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:birthday</span><span class="p">,</span> <span class="ss">:gender</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span><span class="n">birthday</span><span class="p">,</span><span class="n">gender</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@name</span> <span class="o">=</span> <span class="nb">name</span>
</span><span class='line'>    <span class="vi">@birthday</span> <span class="o">=</span> <span class="n">birthday</span>
</span><span class='line'>    <span class="vi">@gender</span> <span class="o">=</span> <span class="n">gender</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">company</span><span class="o">=</span> <span class="nb">name</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">company</span> <span class="o">=</span> <span class="nb">name</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">position</span><span class="o">=</span> <span class="n">position</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">position</span> <span class="o">=</span> <span class="n">position</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">hobby</span> <span class="o">*</span><span class="n">arg</span>
</span><span class='line'>    <span class="s2">&quot;I like </span><span class="si">#{</span><span class="n">arg</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;,&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">me</span> <span class="o">=</span> <span class="no">Person</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;徐耀&quot;</span><span class="p">,</span><span class="s2">&quot;1991-02-03&quot;</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="n">me</span><span class="o">.</span><span class="n">nickname</span> <span class="o">=</span> <span class="sx">%W(老徐 徐逗逗)</span>
</span><span class='line'><span class="n">me</span><span class="o">.</span><span class="n">company</span><span class="o">=</span> <span class="s2">&quot;上海微客来软件技术有限公司&quot;</span>
</span><span class='line'><span class="n">me</span><span class="o">.</span><span class="n">position</span> <span class="o">=</span> <span class="s2">&quot;Ruby Engineer&quot;</span>
</span><span class='line'><span class="n">me</span><span class="o">.</span><span class="n">hobby</span> <span class="s2">&quot;coding&quot;</span><span class="p">,</span><span class="s2">&quot;reading&quot;</span><span class="p">,</span><span class="s2">&quot;music&quot;</span><span class="p">,</span><span class="s2">&quot;traveling&quot;</span><span class="p">,</span><span class="s2">&quot;grils&quot;</span>
</span><span class='line'><span class="n">me</span><span class="o">.</span><span class="n">weibo</span> <span class="o">=</span> <span class="s2">&quot;http://weibo.com/1676361452&quot;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Understand Rails Virtual Attributes]]></title>
    <link href="http://xuyao.club/blog/2015/06/04/how-to-understand-rails-virtual-attributes/"/>
    <updated>2015-06-04T16:37:50+08:00</updated>
    <id>http://xuyao.club/blog/2015/06/04/how-to-understand-rails-virtual-attributes</id>
    <content type="html"><![CDATA[<h4>在网上看到关于rails  virtual attributes 的例子,得觉挺好玩的,自己动手试一下,好叼</h4>

<p>有时候在一张表里面有两个字段,但是实际表单里其实只有一个文本框输入,比如老外的名字分first_name last_name,
在表里面是分开保存的,但其实是在一个文本框中输入的,这里使用virtal attriubtes最恰当不过了,看表结构</p>

<!-- more -->


<p>表里有first_name和full_name两个属性</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">CreateTeachers</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Migration</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">change</span>
</span><span class='line'>    <span class="n">create_table</span> <span class="ss">:teachers</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">string</span> <span class="ss">:first_name</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">string</span> <span class="ss">:last_name</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">integer</span> <span class="ss">:age</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">integer</span> <span class="ss">:gender</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">string</span> <span class="ss">:mobile</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">timestamps</span> <span class="ss">null</span><span class="p">:</span> <span class="kp">false</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p> 但是有时候在页面上不需要用两个文本框,只要一个full_name就ok</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sx">%= form_for(@teacher) do |f| %&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sx">  #只在有一个full_name 的文本框就可以</span>
</span><span class='line'><span class="sx">  &lt;div class=</span><span class="s2">&quot;field&quot;</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="sx">%= f.label :full_name %&gt;&lt;br&gt;</span>
</span><span class='line'><span class="sx">    &lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">text_field</span> <span class="ss">:full_name</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">  &lt;/div&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">div</span> <span class="n">class</span><span class="o">=</span><span class="s2">&quot;field&quot;</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="sx">%= f.label :age %&gt;&lt;br&gt;</span>
</span><span class='line'><span class="sx">    &lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">number_field</span> <span class="ss">:age</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">  &lt;/div&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">div</span> <span class="n">class</span><span class="o">=</span><span class="s2">&quot;field&quot;</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="sx">%= f.label :gender %&gt;&lt;br&gt;</span>
</span><span class='line'><span class="sx">    &lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">number_field</span> <span class="ss">:gender</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">  &lt;/div&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">div</span> <span class="n">class</span><span class="o">=</span><span class="s2">&quot;field&quot;</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="sx">%= f.label :mobile %&gt;&lt;br&gt;</span>
</span><span class='line'><span class="sx">    &lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">text_field</span> <span class="ss">:mobile</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">  &lt;/div&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">div</span> <span class="n">class</span><span class="o">=</span><span class="s2">&quot;actions&quot;</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">submit</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">  &lt;/div&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sx">% end </span><span class="o">%&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>model层可以这样写</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Teacher</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">full_name</span>
</span><span class='line'>      <span class="o">[</span><span class="n">first_name</span><span class="p">,</span> <span class="n">last_name</span><span class="o">].</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>  
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">full_name</span><span class="o">=</span> <span class="p">(</span><span class="n">full_name</span><span class="p">)</span>
</span><span class='line'>      <span class="nb">split</span> <span class="o">=</span> <span class="n">full_name</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'>      <span class="nb">self</span><span class="o">.</span><span class="n">first_name</span> <span class="o">=</span> <span class="nb">split</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
</span><span class='line'>      <span class="nb">self</span><span class="o">.</span><span class="n">last_name</span> <span class="o">=</span> <span class="nb">split</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>  
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里full_name就是一个虚拟属性(virtual attributes)
上面两个方法其实就是getter和setter(java中有这种概念)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails 中alias Alias_method Alias_method_chain的使用]]></title>
    <link href="http://xuyao.club/blog/2015/05/28/ruby-alias-methods/"/>
    <updated>2015-05-28T22:03:17+08:00</updated>
    <id>http://xuyao.club/blog/2015/05/28/ruby-alias-methods</id>
    <content type="html"><![CDATA[<h5>首先看一下alias的用法，上一个实例是明了</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Dog</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">say</span>
</span><span class='line'>          <span class="nb">puts</span>  <span class="s2">&quot;say hello&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'> <span class="k">alias</span> <span class="ss">:wang</span> <span class="ss">:say</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">dog</span> <span class="o">=</span> <span class="no">Dog</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">dog</span><span class="o">.</span><span class="n">wang</span>
</span><span class='line'>
</span><span class='line'><span class="o">=&gt;</span> <span class="n">say</span> <span class="n">hello</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>在类中可以将一个实例方法重新命名,注意的是新方法在前面，用空格格开</p>

<h5>alias_method的用法，</h5>

<p>和alias一样，只是他是module的一个私有方法，而且它的方法名可以是字符中，而alias不行，看代码</p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Dog</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">say</span>
</span><span class='line'>          <span class="nb">puts</span>  <span class="s2">&quot;say hello&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">alias_method</span> <span class="s2">&quot;wang&quot;</span><span class="p">,</span> <span class="s2">&quot;say&quot;</span>
</span><span class='line'><span class="c1">#alias_method :wang, :say</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Animal</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Dog</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="no">Anima</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">a</span><span class="o">.</span><span class="n">wang</span>
</span><span class='line'>
</span><span class='line'><span class="o">=&gt;</span><span class="n">say</span> <span class="n">hello</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h5>alias_method_chain 是ActiveSupport的一个公有实例方法，用法和alias_method是一样的，这里不举例，最后附上alias_method_chain的源码</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">alias_method_chain</span><span class="p">(</span><span class="n">target</span><span class="p">,</span> <span class="n">feature</span><span class="p">)</span>
</span><span class='line'>  <span class="c1"># Strip out punctuation on predicates or bang methods since    </span>
</span><span class='line'>  <span class="c1"># e.g. target?_without_feature is not a valid method name.    </span>
</span><span class='line'>  <span class="n">aliased_target</span><span class="p">,</span> <span class="n">punctuation</span> <span class="o">=</span> <span class="n">target</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">sub</span><span class="p">(</span><span class="sr">/([?!=])$/</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">),</span> <span class="vg">$1</span>
</span><span class='line'>  <span class="k">yield</span><span class="p">(</span><span class="n">aliased_target</span><span class="p">,</span> <span class="n">punctuation</span><span class="p">)</span> <span class="k">if</span> <span class="nb">block_given?</span>
</span><span class='line'>  <span class="n">with_method</span><span class="p">,</span> <span class="n">without_method</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">aliased_target</span><span class="si">}</span><span class="s2">_with_</span><span class="si">#{</span><span class="n">feature</span><span class="si">}#{</span><span class="n">punctuation</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">aliased_target</span><span class="si">}</span><span class="s2">_without_</span><span class="si">#{</span><span class="n">feature</span><span class="si">}#{</span><span class="n">punctuation</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="n">alias_method</span> <span class="n">without_method</span><span class="p">,</span> <span class="n">target</span>
</span><span class='line'>  <span class="n">alias_method</span> <span class="n">target</span><span class="p">,</span> <span class="n">with_method</span>
</span><span class='line'>  <span class="k">case</span>
</span><span class='line'>    <span class="k">when</span> <span class="nb">public_method_defined?</span><span class="p">(</span><span class="n">without_method</span><span class="p">)</span>
</span><span class='line'>      <span class="kp">public</span> <span class="n">target</span>
</span><span class='line'>    <span class="k">when</span> <span class="nb">protected_method_defined?</span><span class="p">(</span><span class="n">without_method</span><span class="p">)</span>
</span><span class='line'>      <span class="kp">protected</span> <span class="n">target</span>
</span><span class='line'>    <span class="k">when</span> <span class="nb">private_method_defined?</span><span class="p">(</span><span class="n">without_method</span><span class="p">)</span>
</span><span class='line'>    <span class="kp">private</span> <span class="n">target</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello Everybody]]></title>
    <link href="http://xuyao.club/blog/2015/05/26/my-first-post/"/>
    <updated>2015-05-26T17:29:27+08:00</updated>
    <id>http://xuyao.club/blog/2015/05/26/my-first-post</id>
    <content type="html"><![CDATA[<p>hello everybody, this is my first post, I'am very happy, bescuse it is successful.</p>

<p>如果想了解微信相关开发的东西请到我的<a href="http://blog.sina.com.cn/xuyao90">新浪博客</a></p>
]]></content>
  </entry>
  
</feed>
