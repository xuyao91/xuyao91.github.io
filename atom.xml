<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[老徐]]></title>
  <link href="http://xuyao.club/atom.xml" rel="self"/>
  <link href="http://xuyao.club/"/>
  <updated>2017-05-06T17:07:13+08:00</updated>
  <id>http://xuyao.club/</id>
  <author>
    <name><![CDATA[Peter Xu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ruby元编程之猴子补丁]]></title>
    <link href="http://xuyao.club/blog/2017/05/06/metaprogramming-ruby-of-monkeypatch/"/>
    <updated>2017-05-06T16:48:53+08:00</updated>
    <id>http://xuyao.club/blog/2017/05/06/metaprogramming-ruby-of-monkeypatch</id>
    <content type="html"><![CDATA[<h4>打开类</h4>

<p>先看一个例子，</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">3</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">Dog</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;wang...&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="n">wang</span><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>   <span class="n">wang</span><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>   <span class="n">wang</span><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<!-- more -->


<p>上面的代码并非定义三个同名的类，而是第一次定义一个类，其它两次是重新打开这个类。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Dog</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">say</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;wang wang...&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Dog</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">eat</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;bone&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">dog</span> <span class="o">=</span> <span class="no">Dog</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">dog</span><span class="o">.</span><span class="n">say</span>    <span class="c1">#=&gt; wang wang...</span>
</span><span class='line'><span class="n">day</span><span class="o">.</span><span class="n">eat</span>     <span class="c1">#= bone</span>
</span></code></pre></td></tr></table></div></figure>


<p> 从上面的例子可以看出，当Ruby开始着手定义一个类，并定义say()方法，第二次再提及Dog类时，如果它已经存在，Ruby就不用再定义了，只需要重新打开这个已经存在的类，并定义eat()方法。</p>

<p>&emsp;像这种你总是可以重新打开一个已经存在的类并对它进行动态修改的技术，可以称之为<strong><em>打开类(open class)</em></strong></p>

<h4>猴子打补丁</h4>

<p>&emsp;你写了一个substitute方法，功能是在一个数组中，把一个指定的元素替换成另一个元素的,代码如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">def</span> <span class="nf">substitute</span><span class="p">(</span><span class="n">array</span><span class="p">,</span> <span class="n">from</span><span class="p">,</span> <span class="n">to</span><span class="p">)</span>
</span><span class='line'>    <span class="n">array</span><span class="o">.</span><span class="n">each_with_index</span> <span class="k">do</span> <span class="o">|</span><span class="n">v</span><span class="p">,</span> <span class="n">i</span><span class="o">|</span>
</span><span class='line'>      <span class="n">array</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">to</span> <span class="k">if</span> <span class="n">v</span> <span class="o">==</span> <span class="n">from</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#=&gt; </span>
</span><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;zh&quot;</span><span class="p">,</span> <span class="s2">&quot;usa&quot;</span><span class="p">,</span> <span class="s2">&quot;ja&quot;</span><span class="p">,</span> <span class="s2">&quot;ck&quot;</span><span class="o">]</span>
</span><span class='line'><span class="n">substitute</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="s2">&quot;ja&quot;</span><span class="p">,</span> <span class="s2">&quot;kr&quot;</span><span class="p">)</span>
</span><span class='line'><span class="o">[</span><span class="s2">&quot;zh&quot;</span><span class="p">,</span> <span class="s2">&quot;usa&quot;</span><span class="p">,</span> <span class="s2">&quot;kr&quot;</span><span class="p">,</span> <span class="s2">&quot;ck&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>&emsp;果然是个好方法，用起来很方便，但是很快你发现其实这个方法可以再重构一下，把它定义成Array中的一个实例方法岂不是更好，于是你又改了一下，代码如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Array</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">substitute</span><span class="p">(</span><span class="n">from</span><span class="p">,</span> <span class="n">to</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">each_with_index</span> <span class="k">do</span> <span class="o">|</span><span class="n">v</span><span class="p">,</span> <span class="n">i</span><span class="o">|</span>
</span><span class='line'>      <span class="nb">self</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">to</span> <span class="k">if</span> <span class="n">v</span> <span class="o">==</span> <span class="n">from</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#=&gt; </span>
</span><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;zh&quot;</span><span class="p">,</span> <span class="s2">&quot;usa&quot;</span><span class="p">,</span> <span class="s2">&quot;ja&quot;</span><span class="p">,</span> <span class="s2">&quot;ck&quot;</span><span class="o">]</span>
</span><span class='line'><span class="n">a</span><span class="o">.</span><span class="n">substitute</span><span class="p">(</span><span class="s2">&quot;ja&quot;</span><span class="p">,</span> <span class="s2">&quot;kr&quot;</span><span class="p">)</span>
</span><span class='line'><span class="o">[</span><span class="s2">&quot;zh&quot;</span><span class="p">,</span> <span class="s2">&quot;usa&quot;</span><span class="p">,</span> <span class="s2">&quot;kr&quot;</span><span class="p">,</span> <span class="s2">&quot;ck&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>&emsp;上面的代码是打开Array类，并再类中添加substitute()方法，可以看到，你并没有修改原始的Array类库，而仅仅是重新打开了它，再往里面增加方法，
简直是太完美了，Array类中竟然缺少这么一个好用的方法，还好你把它加上了。</p>

<p>&emsp;像这种在不改变源码的情况下，对功能进行动态追加、修改的技术叫做<em><strong>猴子补丁(Monkey patch)</strong></em></p>

<h4>猴子补丁引起的问题</h4>

<p>&emsp;如上所说，在Ruby中，可以很轻松地打开一个已经定义的类，并往类中塞方法（包括String,Array类）
 这时你突然发现substitute这个单词太长，影响使用，你已经想到了一个更好的方法名replace,于是你把代码又改了一次，如下： </p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">class</span> <span class="nc">Array</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">replace</span><span class="p">(</span><span class="n">from</span><span class="p">,</span> <span class="n">to</span><span class="p">)</span>
</span><span class='line'>      <span class="nb">self</span><span class="o">.</span><span class="n">each_with_index</span> <span class="k">do</span> <span class="o">|</span><span class="n">v</span><span class="p">,</span> <span class="n">i</span><span class="o">|</span>
</span><span class='line'>        <span class="nb">self</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">to</span> <span class="k">if</span> <span class="n">v</span> <span class="o">==</span> <span class="n">from</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>&emsp;简直太完美了，你轻轻松松就在Ruby自己的类库中添加了方法，这时你旁边的同事一头雾水的在找bug,说自己明明没改过这块代码，怎么现在代码却报错了，你从容地凑过去看，帮他找bug, 代码如下。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="o">[</span> <span class="s2">&quot;a&quot;</span><span class="p">,</span> <span class="s2">&quot;b&quot;</span><span class="p">,</span> <span class="s2">&quot;c&quot;</span><span class="p">,</span> <span class="s2">&quot;d&quot;</span><span class="p">,</span> <span class="s2">&quot;e&quot;</span> <span class="o">]</span>
</span><span class='line'><span class="n">a</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="o">[</span> <span class="s2">&quot;x&quot;</span><span class="p">,</span> <span class="s2">&quot;y&quot;</span><span class="p">,</span> <span class="s2">&quot;z&quot;</span> <span class="o">]</span><span class="p">)</span>
</span><span class='line'><span class="c1">#=&gt;[ &quot;x&quot;, &quot;y&quot;, &quot;z&quot; ]  #TODO 你同事预期出来的结果</span>
</span></code></pre></td></tr></table></div></figure>


<p>&emsp;天啦噜，你同事怎么这么快就用了你刚定义的replace()方法，还SB一样后面只带一个参数，我方法里面明明有两个参数。。。
你同事说，我明明记得Array类中有个replace()方法，是把当前数组内容替换，怎么会报错呢？
这时你好像明白了什么，Array类中本来就有replace()方法，我刚才无意中把这个replace()给覆写了，为了证明你的说法，你把刚才定义的方法去掉，并在Array中的方法找了一遍，看下是否有已经定义过的replace()方法</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[].</span><span class="n">methods</span><span class="o">.</span><span class="n">grep</span><span class="p">(</span><span class="sr">/replace/</span><span class="p">)</span>
</span><span class='line'><span class="c1">#=&gt; [:replace] </span>
</span></code></pre></td></tr></table></div></figure>


<p>&emsp;好了，你的问题找到了，是刚才你意想天开地在Array类中加了一个已经存在的方法(覆写了方法),你悄悄地把代码改回去，并让你同事pull一下代码，再试下，应该不会错，你同事pull了代码，运行一下果然没错，这时更一头雾水，你说没问题就行了，去吃饭。。。
经过上面的事情，你总结出了几条经验
-   打开一个已定义的类，并往里面添加方法是很危险的，因为你并不知道类中是否已经存在这个方法，
-   猴子补丁是全局性的，一旦你修改了Array中的replace()方法，则系统中的所有数组都会加载这个方法
-   猴子补丁是不可见的，如果重定义了Array#replace()方法，则很难发现这个方法被修改了，由于是全局性的，你很难发现问题所在，也很难找出在哪个地方定义了这个方法。</p>

<h4>如何避免猴子补丁引起的问题</h4>

<p>我们先来看个例子，</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">M</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">my_method</span>
</span><span class='line'>    <span class="s2">&quot;M#my_method()&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">C</span>
</span><span class='line'>  <span class="kp">include</span> <span class="n">M</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">D</span> <span class="o">&lt;</span> <span class="n">C</span><span class="p">;</span> <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">D</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">my_method</span><span class="p">()</span>  <span class="c1">#=&gt;&quot;M#my_method()&quot;</span>
</span><span class='line'><span class="c1">#TODO 查看类D的所的父类</span>
</span><span class='line'><span class="n">D</span><span class="o">.</span><span class="n">ancestors</span>   <span class="c1">#=&gt; [D, C, M, Object, Kernel, BasicObject]</span>
</span></code></pre></td></tr></table></div></figure>


<p>&emsp;从上面列子可以看到，当我们在一个类中包含(include)一个模块时，Ruby创建了一个封装该模块的匿名类，并把这个匿名类插入到祖先链中，其在链中的位置正好包含在它的类的上方，这些封装的类就叫做<strong><em>包含类(include class)</em></strong>,或者叫<strong><em>代理类(proxy class)</em></strong>。</p>

<p>接下来我们重新打开ruby的irb,试着查看一下Array的祖先链</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">Array</span><span class="o">.</span><span class="n">ancestors</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">[</span><span class="nb">Array</span><span class="p">,</span> <span class="no">Enumerable</span><span class="p">,</span> <span class="no">Object</span><span class="p">,</span> <span class="no">Kernel</span><span class="p">,</span> <span class="no">BasicObject</span><span class="o">]</span>
</span><span class='line'><span class="c1">#TODO可以看到Ruby初始Array类中的祖先一共有5个</span>
</span></code></pre></td></tr></table></div></figure>


<p>&emsp;然后我们再打开rails环境下的console(命令rails console),其环境加载了包括rails的各种gems源码和你自己的代码，同样的查看Array中的祖先链</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">Array</span><span class="o">.</span><span class="n">ancestors</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">[</span><span class="nb">Array</span><span class="p">,</span> <span class="no">RQRCode</span><span class="o">::</span><span class="no">CoreExtensions</span><span class="o">::</span><span class="nb">Array</span><span class="o">::</span><span class="no">Behavior</span><span class="p">,</span> <span class="no">V8</span><span class="o">::</span><span class="no">Conversion</span><span class="o">::</span><span class="nb">Array</span><span class="p">,</span> <span class="no">JSON</span><span class="o">::</span><span class="no">Ext</span><span class="o">::</span><span class="no">Generator</span><span class="o">::</span><span class="no">GeneratorMethods</span><span class="o">::</span><span class="nb">Array</span><span class="p">,</span> <span class="no">Enumerable</span><span class="p">,</span> <span class="no">Object</span><span class="p">,</span> <span class="no">PP</span><span class="o">::</span><span class="no">ObjectMixin</span><span class="p">,</span> <span class="no">ActiveSupport</span><span class="o">::</span><span class="no">Dependencies</span><span class="o">::</span><span class="no">Loadable</span><span class="p">,</span> <span class="no">V8</span><span class="o">::</span><span class="no">Conversion</span><span class="o">::</span><span class="no">Object</span><span class="p">,</span> <span class="no">JSON</span><span class="o">::</span><span class="no">Ext</span><span class="o">::</span><span class="no">Generator</span><span class="o">::</span><span class="no">GeneratorMethods</span><span class="o">::</span><span class="no">Object</span><span class="p">,</span> <span class="no">Kernel</span><span class="p">,</span> <span class="no">BasicObject</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>&emsp;天呐，Array类怎么多出来这么多父类，为了找出原因，你随便找了个父类ActiveSupport::Dependencies::Loadable研究下，可以看到源码<a href="https://github.com/rails/rails/blob/f243e7f0d0b2cef350127fd518532fedb65f0bd0/activesupport/lib/active_support/dependencies.rb">点这里</a>,其中有一个hook!方法</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">hook!</span>
</span><span class='line'>  <span class="no">Object</span><span class="o">.</span><span class="n">class_eval</span> <span class="p">{</span> <span class="kp">include</span> <span class="no">Loadable</span> <span class="p">}</span>
</span><span class='line'>  <span class="no">Module</span><span class="o">.</span><span class="n">class_eval</span> <span class="p">{</span> <span class="kp">include</span> <span class="no">ModuleConstMissing</span> <span class="p">}</span>
</span><span class='line'>  <span class="no">Exception</span><span class="o">.</span><span class="n">class_eval</span> <span class="p">{</span> <span class="kp">include</span> <span class="no">Blamable</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>&emsp;它的作用就是将所需的各种Meta Programming挂到Object和Module下，而其实这里ActiveSupport::Dependencies::Loadable并不是一个真正的类，看源码我们就可以发现，它其它是一个模块，被include到了Object类里，也就是我们上面讲到的，ActiveSupport::Dependencies::Loadable其实是一个代理类，那为什么要这样做呢，因为使用模块(带了各种namespace的)可以让猴子补丁更明显一些，想对而言比较容易追踪到他们，因为这种方式至少可以在祖先类中看到这个模块。</p>

<p>所以使用<strong><em>命名空间(namespace)</em></strong>可以有效地解决类名冲突，从而避免猴子补丁引起的问题</p>

<h4>Rails中如何防止猴子补丁引起的问题</h4>

<p>&emsp;rails在ActviteRecord中，有个instance_method_already_implemented?()方法，点击<a href="https://github.com/rails/rails/blob/master/activerecord/lib/active_record/attribute_methods.rb">查看源码</a>,它会在你定义一个动态方法前，首先会检查有没有同名方法存在，如果有的话，方法会抛出一个异常，否则返回false,说明可以定义方法，举个栗子</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Patient</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">save</span>
</span><span class='line'>    <span class="s1">&#39;already defined by Active Record&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Patient</span><span class="o">.</span><span class="n">instance_method_already_implemented?</span><span class="p">(</span><span class="ss">:save</span><span class="p">)</span>
</span><span class='line'><span class="c1">#=&gt;  ActiveRecord::DangerousAttributeError: save is defined by Active Record. Check to make sure that you don&#39;t have an attribute or method with the same name.</span>
</span><span class='line'><span class="no">Patient</span><span class="o">.</span><span class="n">instance_method_already_implemented?</span><span class="p">(</span><span class="ss">:aaaaaa</span><span class="p">)</span>
</span><span class='line'> <span class="c1">#=&gt; false </span>
</span></code></pre></td></tr></table></div></figure>


<h4>Rake中如何防止猴子补丁引起的问题</h4>

<p>&emsp;在rake 中有一个名为Module#rake_extension()的方法，这里看源码<a href="https://github.com/ruby/rake/blob/93e55a4ef1dbaee42f0f355f86d837c4e2551fc1/lib/rake/ext/core.rb">点击查看</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">def</span> <span class="nf">rake_extension</span><span class="p">(</span><span class="nb">method</span><span class="p">)</span> <span class="c1"># :nodoc:</span>
</span><span class='line'>    <span class="k">if</span> <span class="nb">method_defined?</span><span class="p">(</span><span class="nb">method</span><span class="p">)</span>
</span><span class='line'>      <span class="vg">$stderr</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;WARNING: Possible conflict with Rake extension: &quot;</span> <span class="o">+</span>
</span><span class='line'>        <span class="s2">&quot;</span><span class="si">#{</span><span class="nb">self</span><span class="si">}</span><span class="s2">#</span><span class="si">#{</span><span class="nb">method</span><span class="si">}</span><span class="s2"> already exists&quot;</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="k">yield</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>&emsp;Rake在它想打开类来添加方法时，会使用rake_extension()方法检查它是否已经存在，如果错误地重定义一个已经存在的方法，那么rake_extension()会抛出一个警告信息</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;rake&#39;</span>
</span><span class='line'><span class="k">class</span> <span class="nc">String</span>
</span><span class='line'>  <span class="n">rake_extension</span><span class="p">(</span><span class="s2">&quot;xyz&quot;</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">xyz</span>
</span><span class='line'>      <span class="s2">&quot;xyz&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="c1">#=&gt; :xyz</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">String</span>
</span><span class='line'>  <span class="n">rake_extension</span><span class="p">(</span><span class="s2">&quot;to_s&quot;</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">to_s</span>
</span><span class='line'>      <span class="s2">&quot;to_s&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#=&gt; WARNING: Possible conflict with Rake extension: String#to_s already exists</span>
</span></code></pre></td></tr></table></div></figure>


<p>&emsp;最后，在使用猴子补丁的时候，千万不要覆写、修改了原类中的方法，不然你会走上一条不归路的。</p>

<h6>参考资料</h6>

<p>《Ruby元编程》<br/>
<a href="https://en.wikipedia.org/wiki/Monkey_patch">https://en.wikipedia.org/wiki/Monkey_patch</a>
<a href="https://web.archive.org/web/20120730014107/http://wiki.zope.org/zope2/MonkeyPatch">https://web.archive.org/web/20120730014107/http://wiki.zope.org/zope2/MonkeyPatch</a>
<a href="https://github.com/rails/rails">https://github.com/rails/rails</a>
<a href="http://thekaiway.com/2013/07/04/code-loading-of-rails/">http://thekaiway.com/2013/07/04/code-loading-of-rails/</a>
<a href="https://github.com/ruby/rake/blob/master/lib/rake/ext/core.rb">https://github.com/ruby/rake/blob/master/lib/rake/ext/core.rb</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[回顾2016年]]></title>
    <link href="http://xuyao.club/blog/2017/01/16/review-2016/"/>
    <updated>2017-01-16T19:54:57+08:00</updated>
    <id>http://xuyao.club/blog/2017/01/16/review-2016</id>
    <content type="html"><![CDATA[<p>&emsp;年过完了，假期也没了，压岁钱也发光了，是时候坐下来写写总结了。</p>

<!-- more -->


<p>&emsp;2016是不平凡的一年，期间经历了很多事情，好事坏事都有，正是经历了有些事情，才发现了不一样的、另一面的我，突然发现很多事情确实是逼一下才做的更好。
曲折的2015 <br/>
&emsp;15年年中换了一份工作，写简历的时候突然发现自己工作已经快三年了，有点感慨，三年真的是一晃就过去了，回头想想三年的技术沉淀，总觉得自己进步很慢，看别人三年的技术经验感觉很牛逼的样子。更要命的是发现自己工作三年，身上竟然没有多少结余资金，有种三年白活的感觉。<br/>
&emsp;15年上半年股市疯狂上涨，身边同事都在谈论自己的股票涨了多少，我肯定知道股票是高风险的东西，机智的我果断买了稍微低风险的基金，一两个月后，基金果然涨了一点，正当享受着自己‘投资’的成果时，五月份股市一路狂跌，到9月份基金跌了50%，成功地被割了韭菜，套的老牢固了，从此一听见股票基金就来气。</p>

<center>  
<img src="http://yydys-prd-shop.oss-cn-hangzhou.aliyuncs.com/mall/banners/202557dcs3ch2rfllii7e1.jpg" /> 
</center>


<p>
&emsp;因为换了工作和住所，上班需要坐地铁，坐地铁有一段空余的时间，为了打发时间，女朋友给我买了个kindle，在地铁上看看书也是极好的。在kindle电子书1元专区下载了一些特价书，当然第一本肯定是红楼梦了，还下载了一些评论很高的书，有【富爸爸，穷爸爸】，【小狗钱钱】等，看完富爸爸穷爸爸后，感觉三观都被刷新了，书中的观点针针见血的阐述了财富增长及消耗，在这里也找到为什么自己是没存到钱的原因，自己除了工作没有其他的资金来源，而且经常买一下不常用的消耗品及负债，在资金来源不足，负债过多的情况，导致积蓄严重存储不足，不得不说真的是一本理财的启蒙好书，小狗钱钱也是非常好的一本理财启蒙书，书中站在小孩子的观点阐述了如何从身边的生活小事发现赚钱的机会，并且如何使用这笔赚到的资金，让钱生钱。</p>

<center>
<img width="315px" height="430px" src="http://7xkvxi.com1.z0.glb.clouddn.com/u=935494884,700337048&fm=23&gp=0.jpg" />
<img src="http://7xkvxi.com1.z0.glb.clouddn.com/timg.jpeg" />
</center>


<p>&emsp;对理财有了一定了解后，才发现自己在15年股市疯狂的时候买基金是多么愚蠢的一件事，完全是盲目跟风，没有自己的观念，不过现在想想也没有那么惋惜，就算是交了一笔学费，至少这件事之后让我有兴趣看了很多投资理财的书，并从中学到了很多理财的知识，感觉打开了另一扇思想大门一样，发现一个全新的世界，这样想想也就不那么可惜了。
&emsp;说到理财的书，不得不说另一本理财及成功学的书【思考致富】，这本书给我印象很深刻，作者一直指出，成功是有方法的，他采访的200位名人中，每个人成功的方法都出奇的一致，没有人能随随便便就成功，就能赚到钱，每个人都付出了常人不能比的汗水，毅力。直到现在我还会不时翻出这本书来看看。</p>

<center>
  <img width="400", height="500" src="http://7xkvxi.com1.z0.glb.clouddn.com/timg%20%281%29.jpeg"  />
</center>


<p>&emsp;看了这么多理财书后，自己也动手实践了一些，吸取了上次的教训，定投了一些基金，买了一些债券基金和一些信誉比较好的P2P理财。
技术上面自己还是感觉进步不是很大，在地铁上看过一些mysql,ruby,redis方面的书，也算是加强一下理解吧，不过有一点比较欣慰的是，现在做项目，不会遇到那种写不出来的窘境，只是写的好不好的问题，姑且算是一直进步的，估计明年这种优越感就没了，因为工作这么多年。有还有写不出来的代码，那真是太丢人了。</p>

<p>不知道写什么好，就列举一些去年觉得做过有意义的事情吧<br/>
1.   一月份开始定投一只中小板的基金一直到现在，有一年多了吧，去年创业板下跌了很多，基金目前亏损中，但是并不担心，定投越是下跌的时候，越是要坚持定投。<br/>
2.   三月开始开启了每月记账的习惯，记得比较简单，就是每月底统计一下上月大概的花销，和上月的结余，这样能比较直观地知道钱花哪去了，这是一个好习惯，需要一直坚持下去<br/>
3.   四月份开始定投了一只沪深300的指数基金，目前为止有5%的收益。<br/>
4.   端午和女朋友一起第一次回了躺家里。<br/>
5.   六月份开始做公司的一个自动化测试的项目，第一次做这种测试方面的项目，感觉还是有点意义的。<br/>
6.   八月份和女朋友第一次回了她的家，有点激动，也祝贺女朋友的弟弟荣获市里文科状元，被复旦大学录取<br/>
7.   十一月开始在豆瓣上持续记录每周总结，主要是记录一下上周工作、学习情况、及一些感想，这也是一个好习惯，将会一直持续下去。</p>

<h2>未完，不续。。。</h2>

<center><img width="300" height="300" src="http://7xkvxi.com1.z0.glb.clouddn.com/e04d442c11dfa9ec094b1f0664d0f703908fc1dc.jpg" /></center>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于rails-jwplayer Gem]]></title>
    <link href="http://xuyao.club/blog/2017/01/16/about-gem-rails-jwplayer/"/>
    <updated>2017-01-16T19:54:57+08:00</updated>
    <id>http://xuyao.club/blog/2017/01/16/about-gem-rails-jwplayer</id>
    <content type="html"><![CDATA[<p>&emsp;这几天公司有个业务，有一些课程（视频播放）需要统计用户的观看数据，包括用户看了多长时间，在哪些地方快进了，哪些地方暂停了，哪些地方重复看了等一些用户的行为操作，调查了一翻，H5自带的video是不支持这些功能，好在发现国外有个<a href="https://www.jwplayer.com/">jwplayer</a>的视频播放插件，功能不是一般的强大，支持各种自定义功能，于是看完文档后，自己就集成了一个基于jwplayer的rails gem（<a href="https://github.com/xuyao91/rails-jwplayer">rails-jwplayer</a>），便于以后自己用。</p>

<p>&emsp;目前功能做的比较简单，就是集成了一些基本的功能，后期会把spec测试补齐，及再做一些深度的集可成。
具体如何使用，可以到github上看下<a href="https://github.com/xuyao91/rails-jwplayer/blob/master/README.md">rails-jwplayer</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[App自动化测试平台搭建记录之问题汇总]]></title>
    <link href="http://xuyao.club/blog/2016/12/05/2app-text-automation-platform-building-record-of-some-issues/"/>
    <updated>2016-12-05T18:25:38+08:00</updated>
    <id>http://xuyao.club/blog/2016/12/05/2app-text-automation-platform-building-record-of-some-issues</id>
    <content type="html"><![CDATA[<p>搭建测试平台及写测试case时，遇到了一些问题，现在统一做个汇总，记录一下</p>

<!-- more -->


<h3>问题1： 测试数据的问题</h3>

<p>a,测试每个case时，都会产生测试数据，怎么处理测试数据<br/>
b,有些case有上下文逻辑关系，如果第一个case没跑，直接跑第二个case，肯定是跑不通的，也就是说数据之间也有逻辑关系<br/>
c,正常情况下做自动化测试肯定是在生产环境或者类似生产环境上做测试，肯定不能在测试环境上做，因为要保证现在测试的东西跟生产环境是一模一样的，但是生产环境上测试肯定会产生很多的测试数据</p>

<p>解决方法：<br/>
以上问题解决方案是首先把现有的名个服务全部单独部署一套（这个代价有点大），这个环境是介于测试和生产之间，也就是说代码是生产稳定版本，数据库是备份生产的数据库下来（相当于是一个预发环境），这样就保证app的版本跟生产是一样的，只是数据不一样而已；因为数据库不是生产的，所以里面数据我们可以随意删减，每天跑测试case时，我会写一个脚本，把之前的测试数据全部删除，再自动增加一个逻辑上的测试数据上去，这样能保证在每天跑测试case时，数据库是干净的，而且各case都能保证之间的逻辑数据能衔接，现在的做法是每个跑case之前，定时跑一个脚本，删除一些测试数据，及增加一些逻辑数据，但是如果case多了，脚本复杂，其实很难确保删除处理完后，保证case能顺利通过，最好的办法应该是跑每个case之前把数据删除及增加逻辑数据，而不是一起跑，这样就能确保每个case的通过率。</p>

<h3>问题2: 如何测试H5、hybrid app</h3>

<p>app里面混入h5页面很正常，在一个即有原生页面又有H5页面，应该要怎么测试呢。appium其中的一个理念就是你不能为了测试应用而修改应用。为了符合这个方法学，我们可以使用 Selenium 测试传统 web 应用的方法来测试混合 web 应用 (比如，iOS 应用里的元素 &ldquo;UIWebView&rdquo; )，这是有可能的。这里会有一些技术性的复杂，Appium 需要知道你是想测试原生部分呢还是web部分。幸运的是，我们还能遵守 WebDriver 的协议。详细文档可以看<a href="https://github.com/appium/appium/blob/master/docs/en/advanced-concepts/hybrid.md">这里</a>
appium会调用 GET session/:sessionId/contexts 接口来获得当前有context信息， 也可以使用POST session/:sessionId/context来访问当前的context可以具体看下代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">查看当前页面有多少个</span><span class="n">contexts</span>
</span><span class='line'><span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">available_contexts</span>
</span><span class='line'><span class="o">[</span>
</span><span class='line'>    <span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="s2">&quot;NATIVE_APP&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="s2">&quot;WEBVIEW_49&quot;</span>
</span><span class='line'><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="err">查看当前的</span><span class="n">context</span>
</span><span class='line'><span class="o">[</span><span class="mi">2</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">current_context</span>
</span><span class='line'><span class="s2">&quot;NATIVE_APP&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="err">转换</span><span class="n">context</span>
</span><span class='line'><span class="o">[</span><span class="mi">3</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">webview</span> <span class="o">=</span> <span class="n">available_contexts</span><span class="o">.</span><span class="n">last</span>
</span><span class='line'><span class="s2">&quot;WEBVIEW_49&quot;</span>
</span><span class='line'><span class="o">[</span><span class="mi">4</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">set_context</span> <span class="n">webview</span>
</span><span class='line'><span class="kp">nil</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里需要特殊处理下是的ios环境，当在真机上运行用例时，appium 无法直接访问 web 视图，所以我们需要通过 USB 线缆来建立连接。我们使用 ios-webkit-debugger-proxy建立连接。使用 brew 安装最新的 ios-webkit-debug-proxy。在终端运行一下命令:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># 如果你没有安装 brew 的话，先安装 brew。</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">ruby</span> <span class="o">-</span><span class="n">e</span> <span class="s2">&quot;$(curl -fsSL https://raw.github.com/mxcl/homebrew/go/install)&quot;</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">brew</span> <span class="n">update</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">brew</span> <span class="n">install</span> <span class="n">ios</span><span class="o">-</span><span class="n">webkit</span><span class="o">-</span><span class="n">debug</span><span class="o">-</span><span class="n">proxy</span>
</span></code></pre></td></tr></table></div></figure>


<p>一旦安装好了， 你就可以启动代理：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># 将udid替换成你的设备的udid。确保端口 27753 没有被占用</span>
</span><span class='line'><span class="c1"># remote-debugger 将会使用这个端口。</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">ios_webkit_debug_proxy</span> <span class="o">-</span><span class="n">c</span> <span class="ss">c2848f21a19fa7dd3e83d4153225b77e9930039c</span><span class="p">:</span><span class="mi">27753</span> <span class="o">-</span><span class="n">d</span>
</span></code></pre></td></tr></table></div></figure>


<p>还有一个问题就是appium 1.6以上版本需要xcode8打出来的ipa包，1.6以下请用xcode7打包</p>

<h3>未完待续。。。</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails的各种web Application Server]]></title>
    <link href="http://xuyao.club/blog/2016/11/17/rails-web-server/"/>
    <updated>2016-11-17T11:12:15+08:00</updated>
    <id>http://xuyao.club/blog/2016/11/17/rails-web-server</id>
    <content type="html"><![CDATA[<h3>Ruby app server是如何工作的</h3>

<p>但是在深入详细讲解之前，这里先对Ruby app server的概念进行一些介绍</p>

<!-- more -->


<h4>什么是rack</h4>

<p>它提供一个介于Webserver与ruby（或ruby框架）之间的一个非常小且又容易使用的接口<br/>
可以理解成就是一个ruby package,这个package提供了一个基于Ruby Net::HTTP库开发的easy-to-use interface
<img src="http://7xjibn.com1.z0.glb.clouddn.com/rack-logo.png" alt="rack-logo" />
Ruby web app通常情况下并不与HTTP的请求和响应直接发生关系，它是通过一个抽象层rack来与HTTP交互，它只需要处理一个抽象过的HTTP请求和响应，web app响应一个请求时会调用一个call方法，接受一个environment的hash参数，同时会响应一个数组，数组里面包括 The status, the headers, and the body.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">App</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">call</span><span class="p">(</span><span class="n">env</span><span class="p">)</span>
</span><span class='line'>    <span class="o">[</span>
</span><span class='line'>      <span class="mi">200</span><span class="p">,</span>
</span><span class='line'>      <span class="p">{</span> <span class="s1">&#39;Content-Type&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;text/html&#39;</span> <span class="p">},</span>
</span><span class='line'>      <span class="o">[</span> <span class="s2">&quot;&lt;html&gt;&quot;</span><span class="p">,</span> <span class="s2">&quot;get rack</span><span class="se">\&#39;</span><span class="s2">d&quot;</span><span class="p">,</span> <span class="s2">&quot;&lt;/html&gt;&quot;</span> <span class="o">]</span>
</span><span class='line'>    <span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>所以rack的作用就是规范两件基本事情，第一是server应该发送什么给ruby app，ruby app应该返回什么给server</p>

<p>可以创建一个很简单的模拟Web Server例子看下，创建一个config.ru文件，再使用命令rackup启动它</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># config.ru</span>
</span><span class='line'><span class="n">run</span> <span class="no">Proc</span><span class="o">.</span><span class="n">new</span> <span class="p">{</span> <span class="o">|</span><span class="n">env</span><span class="o">|</span> <span class="o">[</span><span class="s1">&#39;200&#39;</span><span class="p">,</span> <span class="p">{</span><span class="s1">&#39;Content-Type&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;text/html&#39;</span><span class="p">},</span> <span class="o">[</span><span class="s1">&#39;get rack\&#39;d&#39;</span><span class="o">]]</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>访问<a href="http://127.0.0.1:9292">http://127.0.0.1:9292</a> ，就可以看到返回的body
<img src="http://7xjibn.com1.z0.glb.clouddn.com/FAFD25AD-7D90-4986-A499-CEBC456798E4.png" alt="body" /></p>

<p>Rack是Ruby的HTTP抽象层。所有的Ruby app server都实现了Rack接口，所以所有的Ruby web framework能够与所有Ruby app server进行无缝工作。
所以app server的职责是接收和分析HTTP请求，然后在底层与web app通过Rack抽象协议进行对话，接着把Rack的响应（也就是application的返回值）转换回真正的HTTP响应。</p>

<p><img src="http://7xjibn.com1.z0.glb.clouddn.com/rack.jpg" alt="rack-server" /></p>

<h3>Rails on Rack</h3>

<p>在本地开发时，使用rails server来启动服务时会创建 Rack::Server 对象并启动服务器,创建 Rack::Server 实例的方法如下：传送门
<a href="https://github.com/rails/rails/blob/83776676e54b387fc52081ff31cfd7710bae9e03/railties/lib/rails/commands/server/server_command.rb#L150">https://github.com/rails/rails/blob/83776676e54b387fc52081ff31cfd7710bae9e03/railties/lib/rails/commands/server/server_command.rb#L150</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Rails</span><span class="o">::</span><span class="no">Server</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">tap</span> <span class="k">do</span> <span class="o">|</span><span class="n">server</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">require</span> <span class="no">APP_PATH</span>
</span><span class='line'>  <span class="no">Dir</span><span class="o">.</span><span class="n">chdir</span><span class="p">(</span><span class="no">Rails</span><span class="o">.</span><span class="n">application</span><span class="o">.</span><span class="n">root</span><span class="p">)</span>
</span><span class='line'>  <span class="n">server</span><span class="o">.</span><span class="n">start</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Rails::Server 继承自 Rack::Server，使用下面的方式调用 Rack::Server#start 方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Server</span> <span class="o">&lt;</span> <span class="o">::</span><span class="no">Rack</span><span class="o">::</span><span class="no">Server</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">start</span>
</span><span class='line'>    <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>    <span class="k">super</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们知道在rails项目的根目录有一个config.ru文件，内容如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># This file is used by Rack-based servers to start the application.</span>
</span><span class='line'>
</span><span class='line'><span class="nb">require</span> <span class="o">::</span><span class="no">File</span><span class="o">.</span><span class="n">expand_path</span><span class="p">(</span><span class="s1">&#39;../config/environment&#39;</span><span class="p">,</span> <span class="bp">__FILE__</span><span class="p">)</span>
</span><span class='line'><span class="n">run</span> <span class="no">Rails</span><span class="o">.</span><span class="n">application</span>
</span></code></pre></td></tr></table></div></figure>


<p>所以我们其实可以使用rackup命令来代替rails server</p>

<h3>多进程阻塞I/O：Unicorn</h3>

<ul>
<li>unicorn是一个Rack应用的http server</li>
<li>具有低延迟、高带宽连接、利用Unix/Unix-like 内核特性的一个多进程服务</li>
<li>Unicorn 会获取和重启因应用程序出错导致死亡的任务，不需要自己管理多个进程和端口。Unicorn 可以产生和管理任何数量的任务进程。</li>
<li>不需要关心应用程序是否是线程安全的，workers 运行在特们自己独立的地址空间，且一次只为一个客户端服务。</li>
<li>unicorn是热启动，nginx 式的二进制升级，不丢失连接。你可以升级 Unicorn、你的整个应用程序、库、甚至 Ruby 编辑器而不丢失客户端连接。</li>
<li>unicron是多进程阻塞I/O，每一个进程一次处理一个client。并发的实现是通过构造多个进程，
如果对方没有数据发送，那么read操作就会被阻塞，如果对方接收数据太慢，那么write操作也会被阻塞。由于这种阻塞行为，一个application一次只能处理一个client。那么我们如何一次处理多个client呢？那就构造多个进程.<br/>
<img src="http://7xjibn.com1.z0.glb.clouddn.com/multi-process-io.jpg" alt="unicorn_process" /><br/>
缺点：</li>
<li>进程本身很重，开销大，所以如果你需要许多I/O并发（例如处理WebSocket，或者你的app需要做很多HTTP的API调用），那么用这种模型并不是太合适。假设我们生产环境有8个worker，每个worker占用内存250M，那么8个worker差不多需要2G的内存，消耗比较大。</li>
<li>unicorn多进程阻塞I/O模型,那么app server必须要通过使用“反向代理缓存（buffering reverse proxy）”进行保护，反向代理缓存可以处理更多数量的I/O并发。反向代理缓存的请求和响应是用以避免app server拒绝(against)slow client，这些个slow client会对application的其他方面进行阻塞，而反向代理缓存可以高效的将slow client进行纪录。</li>
</ul>


<h3>多线程阻塞I/O: puma</h3>

<ul>
<li>puma是一个简洁、快速、多线程、高并发HTTP 1.1server专门为Ruby web applications打造的一个web server</li>
<li>它可以用于任何支持Rack的application，可以用在开发环境和生产环境</li>
<li>每一个进程有多个线程。每一个线程一次处理一个client。并发的实现通过构造小数量的进程，每一个进程包含有多个线程。
<img src="http://7xjibn.com1.z0.glb.clouddn.com/multithreaded-io.jpg" alt="multithreaded" /></li>
</ul>


<p>一个进程有多个线程，每一个线程一次处理一个client。因为线程是轻量级的，所以你可以用更少的内存处理相同数量的I/O并发，puma比unicorn最大的好处就是节省内存</p>

<p>缺点:</p>

<ul>
<li>你的application所有代码或程序库必须都得是线程安全的。</li>
<li>app server应该被反向代理缓存进行保护，原因和多进程I/O阻塞模型一样。相比较而言，多线程的app server不太容易受slow client影响，然而多线程的app server并没有完全解决slow client问题。</li>
</ul>


<h3>slow Client</h3>

<p>什么是“slow client”以及为什么这会成为一个问题？slow client可能是mobile client。mobile网络的高延迟非常的恶心。网络阻塞会让正常的client变成slow。一些client变成slow目的就是要攻击你的server，打个比方，把你的application想象成一个市政府，把app server想象成市政府里的办公桌。人们走近一张办公桌（发送一个请求），处理一些文件类的工作（在app内部进行处理），随后人们带着盖有印章的文件离开（收到一个响应）。slow client就像是人们走近一张办公桌，但是一直不离开，这个时候工作人员就无法帮助其他人。<br/>
<img src="http://7xjibn.com1.z0.glb.clouddn.com/slowclientproblem.jpg" alt="slowclientproblem" /><br/>
slow Client可以通过使用反向代理缓存解决，反向代理缓存可以处理更大量的I/O并发。想象一下我们把百万的工作人员放到市政府外面。这些工作人员并没有受过处理文件的训练。于此相反，他们只是接收你的文件（缓存你的请求），把这些文件带到市政府内部，然后把带有印章的文件再返还给你（缓存你的响应）。这些外部的工作人员永远不会一直站在办公桌前面，所以他们永远不会引起slow client问题。因为这些外部工作人员只是受到过简单的训练，所以他们的雇佣费用很低（RAM占用低），我们可以雇佣很多。<br/>
反向代理通常来说就是Nginx，Nginx缓存了所有的东西，并且可以处理一个被虚拟化了的无限数量的client，像Puma这种多线程server不是很容易受到影响，这是因为它们在市政府内部有更多的办公桌，但是这些办公桌在数量上仍然是有限的，因为比起市政府外面雇佣费用很低的工作人员来说，内部的工作人员需要更多的训练（占用更多的RAM）。<br/>
<img src="http://7xjibn.com1.z0.glb.clouddn.com/bufferingreverseproxy.jpg" alt="bufferingreverseproxy" /></p>

<h6>题外阅读</h6>

<h3>Raptor</h3>

<p><a href="https://github.com/garybernhardt/raptor">Raptor</a>是一款全新的app server,自称性能好的无人能比
<a href="http://www.akitaonrails.com/2014/10/19/the-new-kid-on-the-block-for-ruby-servers-raptor#.VEdVfvmSxb8">http://www.akitaonrails.com/2014/10/19/the-new-kid-on-the-block-for-ruby-servers-raptor#.VEdVfvmSxb8</a></p>

<h6>参考资料</h6>

<p><a href="http://blog.gauravchande.com/what-is-rack-in-ruby-rails">http://blog.gauravchande.com/what-is-rack-in-ruby-rails</a>
<a href="http://ohcoder.com/blog/2014/11/11/raptor-part-1/">http://ohcoder.com/blog/2014/11/11/raptor-part-1/</a>
<a href="https://blog.engineyard.com/2015/understanding-rack-apps-and-middleware">https://blog.engineyard.com/2015/understanding-rack-apps-and-middleware</a>
<a href="http://guides.ruby-china.org/rails_on_rack.html#resources">http://guides.ruby-china.org/rails_on_rack.html#resources</a><br/>
<a href="http://baike.baidu.com/view/1298606.htm">http://baike.baidu.com/view/1298606.htm</a><br/>
<a href="http://zh.wikipedia.org/zh-cn/%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8">http://zh.wikipedia.org/zh-cn/%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于RSA加密的一些问题]]></title>
    <link href="http://xuyao.club/blog/2016/10/20/about-rsa/"/>
    <updated>2016-10-20T18:35:23+08:00</updated>
    <id>http://xuyao.club/blog/2016/10/20/about-rsa</id>
    <content type="html"><![CDATA[<p>做支付的时候经常有各种加密，最常见的算是RSA加密了，以前一直不太明白RSA加密是什么样的，如何工作的，今天看了一些文档，有了一些基本了解，记录下来，做个备份</p>

<h4>什么是RSA</h4>

<p>RSA是一种非对称加密算法，在公开密钥加密和电子商业被广泛使用，名字是由三个创始人的名字首字母组成，更多信息请查看<a href="https://zh.wikipedia.org/wiki/RSA%E5%8A%A0%E5%AF%86%E6%BC%94%E7%AE%97%E6%B3%95">https://zh.wikipedia.org/wiki/RSA%E5%8A%A0%E5%AF%86%E6%BC%94%E7%AE%97%E6%B3%95</a></p>

<!-- more -->


<h4>RSA的工作原理</h4>

<p>假设A要发送一段文字给B，如果A发送的信息需要使用RSA加密，则整个过程如下
*   首先需要给用户A和B分别生成公钥和私钥，双方的公钥信息都公开，私钥则自己保留<br/>
*   A要发送一串字符给B,则先使用B的公钥加密，生成密文，B收到密文后使用私钥解密就得到明文
*   同样的道理，B发送一串字符给A,使用A的公钥加密后发送给A，A收到后使用自己的私钥解密就可得到明文
具体的加密、解密算法原理可以看<a href="http://www.ruanyifeng.com/blog/2013/06/rsa_algorithm_part_one.html">http://www.ruanyifeng.com/blog/2013/06/rsa_algorithm_part_one.html</a></p>

<h4>例子</h4>

<p>可以看下下面的例子</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">data</span> <span class="o">=</span> <span class="s1">&#39;我是明文，给我加密啊&#39;</span>
</span><span class='line'><span class="n">digest</span> <span class="o">=</span> <span class="no">OpenSSL</span><span class="o">::</span><span class="no">Digest</span><span class="o">::</span><span class="no">SHA256</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">pkey</span> <span class="o">=</span> <span class="no">OpenSSL</span><span class="o">::</span><span class="no">PKey</span><span class="o">::</span><span class="no">RSA</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">2048</span><span class="p">)</span>  <span class="c1">#生成2048位的私钥</span>
</span><span class='line'><span class="n">signature</span> <span class="o">=</span> <span class="n">pkey</span><span class="o">.</span><span class="n">sign</span><span class="p">(</span><span class="n">digest</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span>  <span class="c1">#生成签名</span>
</span><span class='line'>
</span><span class='line'><span class="n">pub_key</span> <span class="o">=</span> <span class="n">pkey</span><span class="o">.</span><span class="n">public_key</span> <span class="c1">#生成公钥</span>
</span><span class='line'><span class="n">pub_key</span><span class="o">.</span><span class="n">verify</span><span class="p">(</span><span class="n">digest</span><span class="p">,</span> <span class="n">signature</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span>  <span class="c1">#验签签名是否正确</span>
</span></code></pre></td></tr></table></div></figure>


<p>下面是私钥和公钥的数据格式</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">pkey</span><span class="o">.</span><span class="n">to_pem</span>
</span><span class='line'>
</span><span class='line'><span class="o">-----</span><span class="k">BEGIN</span> <span class="no">RSA</span> <span class="no">PRIVATE</span> <span class="no">KEY</span><span class="o">-----</span><span class="p">\</span><span class="n">nMIIEowIBAAKCAQEAw4a9XP0wqRORAm6hvKjrltdX0mfGIOWi4YqLyB4HYwFC0meR</span><span class="p">\</span><span class="n">nZbQ8ZtGxZ6wJAZ6uuJm7n4ZmMToPqiQywggCEfFjzjnX9HVPkLzuajXSTAqjihhb</span><span class="p">\</span><span class="n">nzs31VrPzwlCNiC</span><span class="o">+</span><span class="n">gJoN</span><span class="o">/</span><span class="no">UofwBQIVh19fAPPGTPL0Mf4n2zIylJudYQbiaL3Honx1</span><span class="p">\</span><span class="n">nL73hmzBeNMR1BbbE</span><span class="o">/</span><span class="n">u5ku3RhgYFetY</span><span class="o">+</span><span class="n">nxQRqxup8ekO3om6Q3Fd</span><span class="o">+</span><span class="mi">1</span><span class="n">gQw0EGdLvl5</span><span class="p">\</span><span class="n">nJb7kCR5ZC6o9cB8vUl</span><span class="o">+</span><span class="n">f</span><span class="o">/</span><span class="n">c1jLm4Buz9AQXpqUAWIbJF2</span><span class="o">+</span><span class="n">g3nvGnPQBKHqyOqlzbD</span><span class="p">\</span><span class="n">nWgm4K</span><span class="o">+</span><span class="no">Bid8gGCUfL9oX4fzJ</span><span class="o">/</span><span class="no">DFzLZOpsCesQKQIDAQABAoIBAF4236oeCkN</span><span class="o">+</span><span class="no">PSJ5</span><span class="p">\</span><span class="n">n4o9AqfyOGTA2dt7FKB4bn003QwHuyp8N7p6eIXi91AkLeW</span><span class="o">+</span><span class="no">BYdlrol</span><span class="o">+</span><span class="mo">06</span><span class="no">CsSOhgW</span><span class="p">\</span><span class="n">nxyp9p1m0Ag6OCsQtfsBUeWFOO94ORk01fY</span><span class="o">+</span><span class="no">B6JT1syBPplMX98h3FnPTMtGG9o67</span><span class="p">\</span><span class="n">nYtDXphbP</span><span class="o">/</span><span class="n">uDUAap6XqsC7Oui4Jfs</span><span class="o">+</span><span class="n">k2uPmDFQ139sgIKme4jS9Ee7XQ</span><span class="o">+</span><span class="no">IReL25VA</span><span class="p">\</span><span class="n">nSF2V2ADgrxHqZ7126YCtJyKxA2K8h8PLy47hw0slln</span><span class="o">/</span><span class="n">W</span><span class="o">+</span><span class="no">FJ4ArAPsRbN1yiQDrAn</span><span class="p">\</span><span class="n">nldRublnTBMvAGBWqSRgZUqT4KvfmnIySGzyfe2</span><span class="o">/</span><span class="no">HdSzW5gHIRgWqTtUecL</span><span class="o">+</span><span class="n">rYbah</span><span class="p">\</span><span class="n">neJeY9AECgYEA8B2NrZ1</span><span class="o">/</span><span class="n">neYZXdE0NFQAx3U4JeMD9WxSk8PJib8t1IxG2D8</span><span class="o">/</span><span class="n">mXug</span><span class="p">\</span><span class="n">n8TGf5TwqWHo79X3YXE25fX0WmNjI6gw7CwYd8vskldvjt2Aw3hiJfTNXrUKtcyAi</span><span class="p">\</span><span class="n">nIfGqXT</span><span class="o">/</span><span class="n">hiWoeYMsRtv9oZ4INcIrSWychcyGxNdKobRXs7oHe0jjFPqkCgYEA0HYN</span><span class="p">\</span><span class="n">ndnjhYqw4fXf2hsc</span><span class="o">/</span><span class="n">medewPrtoHI9TXgBRDsEJDYT5RAMBklhg33RNd</span><span class="o">/</span><span class="no">LQKFRPtqh</span><span class="p">\</span><span class="n">ngMLNqnku6rkIi18GRP</span><span class="o">/</span><span class="n">hdOyuzR</span><span class="o">/</span><span class="n">lbGTQey1K0pnoX32LTBNMACP7hIe6YIvt9jdj</span><span class="p">\</span><span class="n">n8wfxzjmnMZvsyKt564m4ZCexgpZleaEBzFARtYECgYBMRfcFWWx6aedQ5</span><span class="o">+</span><span class="mi">2</span><span class="n">fWbfN</span><span class="p">\</span><span class="n">npCyrzEsroLcyfRT</span><span class="o">+</span><span class="no">Dp6uT8kJVD4NsTnUpCDYnp4M8Pcu6kTaPU5Y0G1nLCXWQwBW</span><span class="p">\</span><span class="n">nZiEJWEGs4OabD5E2W7EA9lg5j16tnV16TtwBNxObpPv1X0xHRyaRCrzeLRrZHbsA</span><span class="p">\</span><span class="n">naYlzQXGDBV33</span><span class="o">/</span><span class="no">YUcXjA50QKBgQC12bYm2o6reFeTRJpfuuNFzCvBp2SyadYGhaB9</span><span class="p">\</span><span class="n">nOAqF2FMEqToEJfGWNqTSHZd</span><span class="o">+</span><span class="n">mvt4HFt1KvslMq</span><span class="o">/</span><span class="mi">1</span><span class="o">/</span><span class="no">VJx2oRqntm8GVjoAmIua8ff</span><span class="p">\</span><span class="n">nHITAMZkf7DIfPFo5aSpZ09mHran59xoPAag0YeDzivVFnSkviyW64VGd</span><span class="o">/</span><span class="no">LsrHoSm</span><span class="p">\</span><span class="n">nCldYgQKBgBzMtLh</span><span class="o">+</span><span class="no">YLQlDfBPt6IDggi</span><span class="o">+</span><span class="n">p1qdMEU8v</span><span class="o">+</span><span class="n">e6pBm7sBTRPplAoXeQfCvJ</span><span class="p">\</span><span class="n">nv9Ix60</span><span class="o">+</span><span class="mi">2</span><span class="no">NH5KKSAqvSYpNqRtWNGIA2zi</span><span class="o">/</span><span class="mi">5</span><span class="n">an1clmKBVpK9EVtOy5qiTcNziyhHdQ</span><span class="p">\</span><span class="n">nq8m7UWJRpck8R88N1DFadxEqb6HfwnW</span><span class="o">/</span><span class="mi">6</span><span class="no">DclKbKIgwxQYQA</span><span class="o">/</span><span class="no">Ug2y</span><span class="p">\</span><span class="n">n</span><span class="o">-----</span><span class="k">END</span> <span class="no">RSA</span> <span class="no">PRIVATE</span> <span class="no">KEY</span><span class="o">-----</span><span class="p">\</span><span class="n">n</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">pub_key</span><span class="o">.</span><span class="n">to_pem</span>
</span><span class='line'>
</span><span class='line'><span class="o">-----</span><span class="k">BEGIN</span> <span class="no">PUBLIC</span> <span class="no">KEY</span><span class="o">-----</span><span class="p">\</span><span class="n">nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAw4a9XP0wqRORAm6hvKjr</span><span class="p">\</span><span class="n">nltdX0mfGIOWi4YqLyB4HYwFC0meRZbQ8ZtGxZ6wJAZ6uuJm7n4ZmMToPqiQywggC</span><span class="p">\</span><span class="n">nEfFjzjnX9HVPkLzuajXSTAqjihhbzs31VrPzwlCNiC</span><span class="o">+</span><span class="n">gJoN</span><span class="o">/</span><span class="no">UofwBQIVh19fAPPG</span><span class="p">\</span><span class="n">nTPL0Mf4n2zIylJudYQbiaL3Honx1L73hmzBeNMR1BbbE</span><span class="o">/</span><span class="n">u5ku3RhgYFetY</span><span class="o">+</span><span class="n">nxQRq</span><span class="p">\</span><span class="n">nxup8ekO3om6Q3Fd</span><span class="o">+</span><span class="mi">1</span><span class="n">gQw0EGdLvl5Jb7kCR5ZC6o9cB8vUl</span><span class="o">+</span><span class="n">f</span><span class="o">/</span><span class="n">c1jLm4Buz9AQXpq</span><span class="p">\</span><span class="n">nUAWIbJF2</span><span class="o">+</span><span class="n">g3nvGnPQBKHqyOqlzbDWgm4K</span><span class="o">+</span><span class="no">Bid8gGCUfL9oX4fzJ</span><span class="o">/</span><span class="no">DFzLZOpsCesQ</span><span class="p">\</span><span class="n">nKQIDAQAB</span><span class="p">\</span><span class="n">n</span><span class="o">-----</span><span class="k">END</span> <span class="no">PUBLIC</span> <span class="no">KEY</span><span class="o">-----</span><span class="p">\</span><span class="n">n</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[App自动化测试平台搭建记录之rspec与appium的完美组合]]></title>
    <link href="http://xuyao.club/blog/2016/08/04/app-test-automation-platform-building-record-of-rspec-and-appium/"/>
    <updated>2016-08-04T18:31:04+08:00</updated>
    <id>http://xuyao.club/blog/2016/08/04/app-test-automation-platform-building-record-of-rspec-and-appium</id>
    <content type="html"><![CDATA[<p>我们的预期目标是每天定时跑测试代码，并生成相应的测试报告，所以这里需要一个比较完善的测试框架来做这些事情，这里我选择的是rspec，</p>

<h4>rspec与appium组合</h4>

<ul>
<li>将app(ios和android)端每个页面封装成自己的类，页面中的每个控件实例成方法，使用到哪个页面只需将对应的类初始化一下。</li>
<li>写测试用例的人员只需写对应的测试用例，而不需要关注每个页面的控件封闭，而写控件封装的人，则只需写类的封装，也不必关注测试用例，这样极大的提高了开发效率</li>
<li>考虑到ios与android中大部分页面的控件以及逻辑都是一样的，所以针对ios和android测试，spec代码只需写一份，这样做的好处是将测试用例与逻辑代码分离，便于以后维护，同时测试用例的扩展性和重用性也大大得到的提高</li>
</ul>


<!-- more -->


<h4>（页面）类的封装</h4>

<p>测试开发流程具体如下，以app上的添加亲友为例
<img src="http://7xjibn.com1.z0.glb.clouddn.com/Screenshot_2016-08-06-17-58-40_com.yydys.png" alt="img" />
可以看到添加亲友页面上有4个控件，那么可以将这个页面封装成一个类，这些控件就是对应的实例方法</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#android对应的类</span>
</span><span class='line'><span class="k">module</span> <span class="nn">Simulator</span>
</span><span class='line'>  <span class="k">module</span> <span class="nn">Android</span>
</span><span class='line'>    <span class="k">module</span> <span class="nn">Pages</span>
</span><span class='line'>      <span class="k">module</span> <span class="nn">Patient</span>
</span><span class='line'>        <span class="k">class</span> <span class="nc">AddRelative</span> <span class="o">&lt;</span> <span class="no">Simulator</span><span class="o">::</span><span class="no">Android</span><span class="o">::</span><span class="no">Pages</span><span class="o">::</span><span class="no">Patient</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>
</span><span class='line'>          <span class="k">def</span> <span class="nf">my_relatives_link</span>
</span><span class='line'>            <span class="n">text</span><span class="p">(</span><span class="s2">&quot;我的亲友&quot;</span><span class="p">)</span>
</span><span class='line'>          <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>          <span class="k">def</span> <span class="nf">add_relative_button</span>
</span><span class='line'>            <span class="n">find</span><span class="p">(</span><span class="nb">id</span><span class="p">:</span> <span class="s2">&quot;com.yydys:id/add_folks&quot;</span><span class="p">)</span>
</span><span class='line'>          <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>          <span class="k">def</span> <span class="nf">relative_select</span>
</span><span class='line'>            <span class="c1">#text(&quot;是你的&quot;)</span>
</span><span class='line'>            <span class="n">find</span><span class="p">(</span><span class="nb">id</span><span class="p">:</span> <span class="s2">&quot;com.yydys:id/role_name&quot;</span><span class="p">)</span>
</span><span class='line'>          <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>          <span class="k">def</span> <span class="nf">name_option_selected</span> <span class="nb">name</span><span class="o">=</span><span class="s2">&quot;爸爸&quot;</span>
</span><span class='line'>            <span class="n">text</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>          <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>          <span class="k">def</span> <span class="nf">mobile_num_text_field</span>
</span><span class='line'>            <span class="n">find</span><span class="p">(</span><span class="nb">id</span><span class="p">:</span> <span class="s2">&quot;com.yydys:id/mobile&quot;</span><span class="p">)</span>
</span><span class='line'>          <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>          <span class="k">def</span> <span class="nf">glucose_sms_reminder</span>
</span><span class='line'>            <span class="n">find</span><span class="p">(</span><span class="nb">id</span><span class="p">:</span> <span class="s2">&quot;com.yydys:id/glucose_exception_togglebtn&quot;</span><span class="p">)</span>
</span><span class='line'>          <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>          <span class="k">def</span> <span class="nf">medicine_sms_reminder</span>
</span><span class='line'>            <span class="n">find</span><span class="p">(</span><span class="nb">id</span><span class="p">:</span> <span class="s2">&quot;com.yydys:id/forget_medication_togglebtn&quot;</span><span class="p">)</span>
</span><span class='line'>          <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>          <span class="k">def</span> <span class="nf">save_button</span>
</span><span class='line'>            <span class="n">find</span><span class="p">(</span><span class="nb">id</span><span class="p">:</span> <span class="s2">&quot;com.yydys:id/right_btn&quot;</span><span class="p">)</span>
</span><span class='line'>          <span class="k">end</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">#ios对应的类</span>
</span><span class='line'><span class="k">module</span> <span class="nn">Simulator</span>
</span><span class='line'>  <span class="k">module</span> <span class="nn">Ios</span>
</span><span class='line'>    <span class="k">module</span> <span class="nn">Pages</span>
</span><span class='line'>      <span class="k">module</span> <span class="nn">Patient</span>
</span><span class='line'>        <span class="k">class</span> <span class="nc">AddRelative</span> <span class="o">&lt;</span> <span class="no">Simulator</span><span class="o">::</span><span class="no">Ios</span><span class="o">::</span><span class="no">Pages</span><span class="o">::</span><span class="no">Patient</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>          <span class="k">def</span> <span class="nf">my_relatives_link</span>
</span><span class='line'>            <span class="n">text</span><span class="p">(</span><span class="s2">&quot;我的亲友&quot;</span><span class="p">)</span>
</span><span class='line'>          <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>          <span class="k">def</span> <span class="nf">add_relative_button</span>
</span><span class='line'>            <span class="n">button_exact</span><span class="p">(</span><span class="s2">&quot;添加亲友&quot;</span><span class="p">)</span>
</span><span class='line'>          <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>          <span class="k">def</span> <span class="nf">relative_select</span>
</span><span class='line'>            <span class="n">text</span><span class="p">(</span><span class="s2">&quot;是您的&quot;</span><span class="p">)</span>
</span><span class='line'>          <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>          <span class="k">def</span> <span class="nf">name_option_selected</span> <span class="nb">name</span><span class="o">=</span><span class="s2">&quot;爸爸&quot;</span>
</span><span class='line'>            <span class="n">text</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>          <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>          <span class="k">def</span> <span class="nf">mobile_num_text_field</span>
</span><span class='line'>            <span class="n">textfield_exact</span><span class="p">(</span><span class="s2">&quot;请输入手机号&quot;</span><span class="p">)</span>
</span><span class='line'>          <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>          <span class="k">def</span> <span class="nf">glucose_sms_reminder</span>
</span><span class='line'>            <span class="n">find</span><span class="p">(</span><span class="ss">xpath</span><span class="p">:</span> <span class="s2">&quot;//UIAApplication[1]/UIAWindow[1]/UIATableView[1]/UIATableCell[3]/UIASwitch[1]&quot;</span><span class="p">)</span>
</span><span class='line'>          <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>          <span class="k">def</span> <span class="nf">medicine_sms_reminder</span>
</span><span class='line'>            <span class="n">find</span><span class="p">(</span><span class="ss">xpath</span><span class="p">:</span> <span class="s2">&quot;//UIAApplication[1]/UIAWindow[1]/UIATableView[1]/UIATableCell[3]/UIASwitch[2]&quot;</span><span class="p">)</span>
</span><span class='line'>          <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>          <span class="k">def</span> <span class="nf">save_button</span>
</span><span class='line'>            <span class="n">button_exact</span><span class="p">(</span><span class="s2">&quot;保存&quot;</span><span class="p">)</span>
</span><span class='line'>            <span class="c1">#find(xpath: &quot;//UIAApplication[1]/UIAWindow[1]/UIATableView[1]/UIATableCell[4]/UIASwitch[1]&quot;)</span>
</span><span class='line'>          <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>          <span class="k">def</span> <span class="nf">return_button</span>
</span><span class='line'>            <span class="n">button_exact</span><span class="p">(</span><span class="s2">&quot;返回&quot;</span><span class="p">)</span>
</span><span class='line'>          <span class="k">end</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到对应页面上的每个控件，ios和android都会有自己的封闭方法，这样做提高了代码的重用性，与测试代码分离，便于以后维护</p>

<h4>测试用例</h4>

<p>上面说道一般ios和android页面上的控件是一样的，所以正常情况下，我们只需写一份测试代码就可以，但是ios和android的测试代码还是要分开跑的，所以这里我引用了rpsec的<a href="http://rspec.info/documentation/3.5/rspec-core/#Shared_Examples_and_Contexts">share_example</a>来做</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#android的测试用例</span>
</span><span class='line'><span class="n">require_relative</span> <span class="s1">&#39;../../../shared/patient/v1/add_relative_spec&#39;</span>
</span><span class='line'><span class="no">RSpec</span><span class="o">.</span><span class="n">describe</span> <span class="s2">&quot;AddRelative   &quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">include_examples</span> <span class="s2">&quot;share_add_relative&quot;</span>  <span class="p">,</span> <span class="s2">&quot;android&quot;</span>
</span><span class='line'><span class="k">end</span>    
</span><span class='line'>
</span><span class='line'><span class="c1">#ios的测试用例</span>
</span><span class='line'><span class="n">require_relative</span> <span class="s1">&#39;../../../shared/patient/v1/add_relative_spec&#39;</span>
</span><span class='line'><span class="no">RSpec</span><span class="o">.</span><span class="n">describe</span> <span class="s2">&quot;AddRelative&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">include_examples</span> <span class="s2">&quot;share_add_relative&quot;</span>  <span class="p">,</span> <span class="s2">&quot;ios&quot;</span>
</span><span class='line'><span class="k">end</span>    
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">#shared部分</span>
</span><span class='line'><span class="n">require_relative</span> <span class="s1">&#39;../../../spec_helper&#39;</span>
</span><span class='line'><span class="no">RSpec</span><span class="o">.</span><span class="n">shared_examples</span> <span class="s2">&quot;share_add_relative&quot;</span> <span class="k">do</span> <span class="o">|</span><span class="n">device</span><span class="o">|</span>
</span><span class='line'>  <span class="n">before</span><span class="p">(</span><span class="ss">:all</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">login</span> <span class="n">device</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">#Appium.promote_appium_methods Object</span>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;add relative&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="k">begin</span>
</span><span class='line'>              <span class="nb">sleep</span><span class="p">(</span><span class="mi">8</span><span class="p">)</span>
</span><span class='line'>          <span class="n">wait</span> <span class="p">{</span><span class="n">add_relative_page</span><span class="o">.</span><span class="n">user_center_bar</span><span class="o">.</span><span class="n">click</span><span class="p">}</span>
</span><span class='line'>          <span class="n">wait</span> <span class="p">{</span><span class="n">add_relative_page</span><span class="o">.</span><span class="n">my_relatives_link</span><span class="o">.</span><span class="n">click</span><span class="p">}</span>
</span><span class='line'>          <span class="n">wait</span> <span class="p">{</span><span class="n">add_relative_page</span><span class="o">.</span><span class="n">add_relative_button</span><span class="o">.</span><span class="n">click</span><span class="p">}</span>
</span><span class='line'>          <span class="k">if</span> <span class="vi">@device</span><span class="o">.</span><span class="n">appium_device</span> <span class="o">==</span>  <span class="ss">:android</span>
</span><span class='line'>              <span class="n">wait</span> <span class="p">{</span><span class="n">add_relative_page</span><span class="o">.</span><span class="n">relative_select</span><span class="o">.</span><span class="n">click</span><span class="p">}</span>
</span><span class='line'>              <span class="n">wait</span> <span class="p">{</span><span class="n">add_relative_page</span><span class="o">.</span><span class="n">name_option_selected</span><span class="p">(</span><span class="s2">&quot;爸爸&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">click</span><span class="p">}</span>
</span><span class='line'>          <span class="k">else</span>
</span><span class='line'>              <span class="n">wait</span> <span class="p">{</span><span class="n">add_relative_page</span><span class="o">.</span><span class="n">relative_select</span><span class="o">.</span><span class="n">click</span><span class="p">}</span>
</span><span class='line'>              <span class="n">wait</span> <span class="p">{</span><span class="n">add_relative_page</span><span class="o">.</span><span class="n">return_button</span><span class="o">.</span><span class="n">click</span><span class="p">}</span>
</span><span class='line'>          <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>          <span class="n">wait</span> <span class="p">{</span><span class="n">add_relative_page</span><span class="o">.</span><span class="n">mobile_num_text_field</span><span class="o">.</span><span class="n">type</span><span class="p">(</span><span class="s2">&quot;13524836959&quot;</span><span class="p">)}</span>
</span><span class='line'>          <span class="k">if</span> <span class="vi">@device</span><span class="o">.</span><span class="n">appium_device</span> <span class="o">==</span>  <span class="ss">:android</span>
</span><span class='line'>              <span class="c1">#screen = wait {add_relative_page.boot_screen}</span>
</span><span class='line'>              <span class="c1">#size = screen.window_size</span>
</span><span class='line'>              <span class="c1">#start_x, end_x, start_y, end_y = size.width - 5, size.width/100, size.height/2, size.height/2</span>
</span><span class='line'>              <span class="c1">#wait {exists{swipe(start_x:start_x,start_y:start_y, end_x:end_x,end_y:end_y, duration:1000)}}</span>
</span><span class='line'>          <span class="k">else</span>
</span><span class='line'>              <span class="n">wait</span> <span class="p">{</span><span class="n">add_relative_page</span><span class="o">.</span><span class="n">glucose_sms_reminder</span><span class="o">.</span><span class="n">click</span><span class="p">}</span>
</span><span class='line'>              <span class="c1">#wait {add_relative_page.medicine_sms_reminder.click}</span>
</span><span class='line'>          <span class="k">end</span>
</span><span class='line'>          <span class="c1">#wait {add_relative_page.glucose_sms_reminder.}</span>
</span><span class='line'>          <span class="c1">#wait {add_relative_page.mobile_num_text_field.type(&quot;11000009123&quot;)}</span>
</span><span class='line'>          <span class="n">wait</span> <span class="p">{</span><span class="n">add_relative_page</span><span class="o">.</span><span class="n">save_button</span><span class="o">.</span><span class="n">click</span><span class="p">}</span>
</span><span class='line'>          <span class="n">expect</span><span class="p">(</span><span class="n">exists</span><span class="p">{</span><span class="n">add_relative_page</span><span class="o">.</span><span class="n">add_relative_button</span><span class="p">})</span><span class="o">.</span><span class="n">to</span> <span class="n">be_truthy</span>
</span><span class='line'>  <span class="k">rescue</span> <span class="o">=&gt;</span> <span class="n">e</span>
</span><span class='line'>          <span class="nb">puts</span> <span class="n">e</span><span class="o">.</span><span class="n">message</span>
</span><span class='line'>          <span class="vi">@driver</span><span class="o">.</span><span class="n">quit</span> <span class="k">if</span> <span class="vi">@driver</span>
</span><span class='line'>          <span class="k">raise</span> <span class="n">e</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">after</span> <span class="k">do</span>
</span><span class='line'>    <span class="vi">@driver</span><span class="o">.</span><span class="n">quit</span> <span class="k">if</span> <span class="vi">@driver</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到写测试用例的人员，不必关注底层控件的封装，只需按正常逻辑写测试用例就可</p>

<h4>测试报告</h4>

<p><img src="http://7xjibn.com1.z0.glb.clouddn.com/C8EA5B20-316A-45CB-A950-5F393B4AEC85.png" alt="img" /></p>

<h4>未完成的工作</h4>

<ul>
<li>配置jenkins，使其每天定时打包最新的代码</li>
<li>动态数据的载入</li>
<li>不同app版本的测试</li>
<li>混合，h5页面的测试</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[App自动化测试平台搭建记录之如何优雅地找到控件]]></title>
    <link href="http://xuyao.club/blog/2016/07/10/app-test-automation-platform-building-record-of-how-to-find-the-ui/"/>
    <updated>2016-07-10T22:22:44+08:00</updated>
    <id>http://xuyao.club/blog/2016/07/10/app-test-automation-platform-building-record-of-how-to-find-the-ui</id>
    <content type="html"><![CDATA[<p>这篇讲一下如果找到对应ios/android里的UI控件，以便我们快速地写测试代码，本系列文章未特殊提到使用什么语言时，默认使用ruby脚本语言。ios/android设备的UI控件有很多种，下面讲一下使用appium Inspector和appium ruby console(arc)来查找UI控件</p>

<!-- more -->


<h4>Appium Inspector GUI</h4>

<p>appium服务启动后，点击inspector,启动client GUI，如下图,GUI已帮我们获取到所有的Ui控件，并且有很多模拟操作，非常适合我们调试用，点击record，每个模拟操作都会生成相应的代码，而且代码还可以选择你需要的语言版本。
<img src="http://7xjibn.com1.z0.glb.clouddn.com/android_detail.png" alt="android_detail" />
<img src="http://7xjibn.com1.z0.glb.clouddn.com/android_record.png" alt="android_record" /><br/>
我们具体定位到某个控件，可以看到这个控件的详细信息，比如我现在找到一个登录按钮，下面是这个登录按钮的信息</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#android某个控件的详细信息</span>
</span><span class='line'><span class="n">content</span><span class="o">-</span><span class="ss">desc</span><span class="p">:</span>
</span><span class='line'><span class="ss">type</span><span class="p">:</span> <span class="n">android</span><span class="o">.</span><span class="n">widget</span><span class="o">.</span><span class="n">Button</span>
</span><span class='line'><span class="ss">text</span><span class="p">:</span> <span class="err">登录</span>
</span><span class='line'><span class="ss">index</span><span class="p">:</span> <span class="mi">1</span>
</span><span class='line'><span class="ss">enabled</span><span class="p">:</span> <span class="kp">true</span>
</span><span class='line'><span class="ss">location</span><span class="p">:</span> <span class="p">{</span><span class="mi">418</span><span class="p">,</span> <span class="mi">1054</span><span class="p">}</span>
</span><span class='line'><span class="ss">size</span><span class="p">:</span> <span class="p">{</span><span class="mi">262</span><span class="p">,</span> <span class="mi">89</span><span class="p">}</span>
</span><span class='line'><span class="ss">checkable</span><span class="p">:</span> <span class="kp">false</span>
</span><span class='line'><span class="ss">checked</span><span class="p">:</span> <span class="kp">false</span>
</span><span class='line'><span class="ss">focusable</span><span class="p">:</span> <span class="kp">true</span>
</span><span class='line'><span class="ss">clickable</span><span class="p">:</span> <span class="kp">true</span>
</span><span class='line'><span class="n">long</span><span class="o">-</span><span class="ss">clickable</span><span class="p">:</span> <span class="kp">false</span>
</span><span class='line'><span class="ss">package</span><span class="p">:</span> <span class="n">com</span><span class="o">.</span><span class="n">yydys</span>
</span><span class='line'><span class="ss">password</span><span class="p">:</span> <span class="kp">false</span>
</span><span class='line'><span class="n">resource</span><span class="o">-</span><span class="nb">id</span><span class="p">:</span> <span class="n">com</span><span class="o">.</span><span class="n">yydys</span><span class="ss">:id</span><span class="o">/</span><span class="n">immediate_experience</span>
</span><span class='line'><span class="ss">scrollable</span><span class="p">:</span> <span class="kp">false</span>
</span><span class='line'><span class="ss">selected</span><span class="p">:</span> <span class="kp">false</span>
</span><span class='line'><span class="ss">xpath</span><span class="p">:</span> <span class="sr">//</span><span class="n">android</span><span class="o">.</span><span class="n">widget</span><span class="o">.</span><span class="n">LinearLayout</span><span class="o">[</span><span class="mi">1</span><span class="o">]/</span><span class="n">android</span><span class="o">.</span><span class="n">widget</span><span class="o">.</span><span class="n">FrameLayout</span><span class="o">[</span><span class="mi">1</span><span class="o">]/</span><span class="n">android</span><span class="o">.</span><span class="n">widget</span><span class="o">.</span><span class="n">LinearLayout</span><span class="o">[</span><span class="mi">1</span><span class="o">]/</span><span class="n">android</span><span class="o">.</span><span class="n">widget</span><span class="o">.</span><span class="n">LinearLayout</span><span class="o">[</span><span class="mi">1</span><span class="o">]/</span><span class="n">android</span><span class="o">.</span><span class="n">widget</span><span class="o">.</span><span class="n">LinearLayout</span><span class="o">[</span><span class="mi">2</span><span class="o">]/</span><span class="n">android</span><span class="o">.</span><span class="n">widget</span><span class="o">.</span><span class="n">Button</span><span class="o">[</span><span class="mi">2</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#ios某个控件下的详情信息</span>
</span><span class='line'><span class="nb">name</span><span class="p">:</span> <span class="err">登录</span>
</span><span class='line'><span class="ss">type</span><span class="p">:</span> <span class="no">UIAButton</span>
</span><span class='line'><span class="ss">value</span><span class="p">:</span>
</span><span class='line'><span class="ss">label</span><span class="p">:</span> <span class="err">登录</span>
</span><span class='line'><span class="ss">hint</span><span class="p">:</span>
</span><span class='line'><span class="ss">enabled</span><span class="p">:</span> <span class="kp">true</span>
</span><span class='line'><span class="ss">visible</span><span class="p">:</span> <span class="kp">true</span>
</span><span class='line'><span class="ss">valid</span><span class="p">:</span> <span class="kp">true</span>
</span><span class='line'><span class="ss">location</span><span class="p">:</span> <span class="p">{</span><span class="mi">192</span><span class="o">.</span><span class="mi">5</span><span class="p">,</span> <span class="mi">575</span><span class="p">}</span>
</span><span class='line'><span class="ss">size</span><span class="p">:</span> <span class="p">{</span><span class="mi">167</span><span class="o">.</span><span class="mi">5</span><span class="p">,</span> <span class="mi">44</span><span class="p">}</span>
</span><span class='line'><span class="ss">xpath</span><span class="p">:</span> <span class="sr">//</span><span class="no">UIAApplication</span><span class="o">[</span><span class="mi">1</span><span class="o">]/</span><span class="no">UIAWindow</span><span class="o">[</span><span class="mi">2</span><span class="o">]/</span><span class="no">UIAScrollView</span><span class="o">[</span><span class="mi">1</span><span class="o">]/</span><span class="no">UIAButton</span><span class="o">[</span><span class="mi">2</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<h4>appium ruby console(arc)</h4>

<p><a href="https://github.com/appium/ruby_console">ruby_console</a>是针对ruby打造的一个console端的gem，使用起来也很方便，直接在console里使用命令arc就能启动设备，不过他并不能读取我们在appium里面的配置信息，所以需要我们手动创建一个appium.txt文件，在此文件目录下面启动，下面的android/ios的appium.txt文件</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#android</span>
</span><span class='line'><span class="o">[</span><span class="n">caps</span><span class="o">]</span>
</span><span class='line'><span class="n">platformName</span> <span class="o">=</span> <span class="s2">&quot;Android&quot;</span>
</span><span class='line'><span class="n">platformVersion</span> <span class="o">=</span> <span class="s1">&#39;5.1&#39;</span>
</span><span class='line'><span class="n">app</span> <span class="o">=</span> <span class="s2">&quot;/Users/xuyao/Downloads/Yydys0627.apk&quot;</span>
</span><span class='line'><span class="n">deviceName</span> <span class="o">=</span> <span class="s2">&quot;Android Simulator&quot;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">#ios</span>
</span><span class='line'><span class="o">[</span><span class="n">caps</span><span class="o">]</span>
</span><span class='line'><span class="n">platformName</span> <span class="o">=</span> <span class="s2">&quot;ios&quot;</span>
</span><span class='line'><span class="n">platformVersion</span> <span class="o">=</span> <span class="s1">&#39;8.2&#39;</span>
</span><span class='line'><span class="n">app</span> <span class="o">=</span> <span class="s2">&quot;/Users/xuyao/Downloads/Cloudoc-Patient.app&quot;</span>
</span><span class='line'><span class="n">deviceName</span> <span class="o">=</span> <span class="s2">&quot;iPhone Simulator&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#启动arc</span>
</span><span class='line'><span class="err">➜</span> <span class="n">ls</span>
</span><span class='line'><span class="n">appium</span><span class="o">.</span><span class="n">txt</span>
</span><span class='line'><span class="err">➜</span> <span class="n">arc</span>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>启动后，我们可以通过page方法查看当前页面所有的元素</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="mi">4</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">page</span>
</span><span class='line'>
</span><span class='line'><span class="n">android</span><span class="o">.</span><span class="n">widget</span><span class="o">.</span><span class="n">FrameLayout</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">id</span><span class="p">:</span> <span class="ss">android</span><span class="p">:</span><span class="nb">id</span><span class="o">/</span><span class="n">content</span>
</span><span class='line'>
</span><span class='line'><span class="n">android</span><span class="o">.</span><span class="n">support</span><span class="o">.</span><span class="n">v4</span><span class="o">.</span><span class="n">view</span><span class="o">.</span><span class="n">ViewPager</span> <span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">id</span><span class="p">:</span> <span class="n">com</span><span class="o">.</span><span class="n">yydys</span><span class="ss">:id</span><span class="o">/</span><span class="n">vp_welcome</span>
</span><span class='line'>
</span><span class='line'><span class="n">android</span><span class="o">.</span><span class="n">widget</span><span class="o">.</span><span class="n">ImageView</span> <span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">id</span><span class="p">:</span> <span class="n">com</span><span class="o">.</span><span class="n">yydys</span><span class="ss">:id</span><span class="o">/</span><span class="n">wel_img</span>
</span><span class='line'>
</span><span class='line'><span class="n">android</span><span class="o">.</span><span class="n">widget</span><span class="o">.</span><span class="n">Button</span> <span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>  <span class="ss">text</span><span class="p">:</span> <span class="err">逛一逛</span>
</span><span class='line'>  <span class="nb">id</span><span class="p">:</span> <span class="n">com</span><span class="o">.</span><span class="n">yydys</span><span class="ss">:id</span><span class="o">/</span><span class="n">direct_access</span>
</span><span class='line'>  <span class="n">strings</span><span class="o">.</span><span class="n">xml</span><span class="p">:</span> <span class="n">direct_access</span>
</span><span class='line'>
</span><span class='line'><span class="n">android</span><span class="o">.</span><span class="n">widget</span><span class="o">.</span><span class="n">Button</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="ss">text</span><span class="p">:</span> <span class="err">登录</span>
</span><span class='line'>  <span class="nb">id</span><span class="p">:</span> <span class="n">com</span><span class="o">.</span><span class="n">yydys</span><span class="ss">:id</span><span class="o">/</span><span class="n">immediate_experience</span>
</span><span class='line'>  <span class="n">strings</span><span class="o">.</span><span class="n">xml</span><span class="p">:</span> <span class="n">immediate_experience</span>
</span><span class='line'>               <span class="n">login</span>
</span><span class='line'><span class="kp">nil</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果觉得页面信息很多，找不到自己想要的控件，page方法后面可以带个参数class_name来过滤元素，如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="mi">5</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">page</span> <span class="ss">:Button</span>
</span><span class='line'>
</span><span class='line'><span class="n">android</span><span class="o">.</span><span class="n">widget</span><span class="o">.</span><span class="n">Button</span> <span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>  <span class="ss">text</span><span class="p">:</span> <span class="err">逛一逛</span>
</span><span class='line'>  <span class="nb">id</span><span class="p">:</span> <span class="n">com</span><span class="o">.</span><span class="n">yydys</span><span class="ss">:id</span><span class="o">/</span><span class="n">direct_access</span>
</span><span class='line'>  <span class="n">strings</span><span class="o">.</span><span class="n">xml</span><span class="p">:</span> <span class="n">direct_access</span>
</span><span class='line'>
</span><span class='line'><span class="n">android</span><span class="o">.</span><span class="n">widget</span><span class="o">.</span><span class="n">Button</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="ss">text</span><span class="p">:</span> <span class="err">登录</span>
</span><span class='line'>  <span class="nb">id</span><span class="p">:</span> <span class="n">com</span><span class="o">.</span><span class="n">yydys</span><span class="ss">:id</span><span class="o">/</span><span class="n">immediate_experience</span>
</span><span class='line'>  <span class="n">strings</span><span class="o">.</span><span class="n">xml</span><span class="p">:</span> <span class="n">immediate_experience</span>
</span><span class='line'>               <span class="n">login</span>
</span><span class='line'><span class="kp">nil</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样就能找到按钮的元素了</p>

<h6>find_element()方法</h6>

<p>根据上面的信息我们可以通过find_elment方法来查找android/ios下的xpath,模拟点击操作</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#android</span>
</span><span class='line'><span class="n">find_element</span><span class="p">(</span><span class="ss">xpath</span><span class="p">:</span> <span class="s2">&quot;//android.widget.LinearLayout[1]/android.widget.FrameLayout[1]/android.widget.LinearLayout[1]/android.widget.LinearLayout[1]/android.widget.LinearLayout[2]/android.widget.Button[2]&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">click</span>
</span><span class='line'><span class="c1">#android我们还可以根据他的recource-id，来查找他的唯一控件</span>
</span><span class='line'><span class="n">find_element</span><span class="p">(</span><span class="nb">id</span><span class="p">:</span> <span class="s2">&quot;com.yydys:id/immediate_experience&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">click</span>
</span><span class='line'><span class="c1">#ios</span>
</span><span class='line'><span class="n">find_element</span><span class="p">(</span><span class="ss">xpath</span><span class="p">:</span> <span class="s2">&quot;//UIAApplication[1]/UIAWindow[2]/UIAScrollView[1]/UIAButton[2]&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">click</span>
</span><span class='line'><span class="c1">#当然你也可以通过class_name来查找，如果一个页面上有多个相同的class_name,会返回第一个tag</span>
</span><span class='line'><span class="n">find_element</span><span class="p">(</span><span class="ss">class_name</span><span class="p">:</span> <span class="s2">&quot;android.widget.Button&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">click</span>  <span class="c1">#android</span>
</span><span class='line'><span class="n">find_element</span><span class="p">(</span><span class="ss">class_name</span><span class="p">:</span> <span class="s2">&quot;UIAButton&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">click</span>
</span></code></pre></td></tr></table></div></figure>


<h6>button_exact方法</h6>

<p>有时候我们知道要找一个按钮，那么我们可以使用button_exact来直接查找一个button,button_exact方法会找到第一个配置到的元素</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="mi">8</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">button_exact</span><span class="p">(</span><span class="s2">&quot;登录&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1">#&lt;Selenium::WebDriver::Element:0x5dffe05a97580bc2 id=&quot;3&quot;&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h6>textfield_exact()方法</h6>

<p>根据给定的值找到EditText/TextFeild第一个元素</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="mi">24</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">textfield_exact</span><span class="p">(</span><span class="s2">&quot;com.yydys:id/login_input&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">type</span> <span class="s2">&quot;9123&quot;</span>
</span><span class='line'><span class="kp">true</span>
</span></code></pre></td></tr></table></div></figure>


<h6>exists()方法</h6>

<p>测试的时候一般需要判断某个元素是否存在，可以使用exists</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="mi">40</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">exists</span><span class="p">{</span><span class="n">button_exact</span><span class="p">(</span><span class="s2">&quot;com.yydys:id/login_btn&quot;</span><span class="p">)}</span>
</span><span class='line'><span class="kp">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>以上就是一些比较常用的方法，以后用到再更新一些新的方法</p>

<h5>参考资料</h5>

<p><a href="https://github.com/appium/ruby_lib/blob/master/docs/android_docs.md">https://github.com/appium/ruby_lib/blob/master/docs/android_docs.md</a><br/>
<a href="https://github.com/appium/ruby_lib/blob/master/docs/ios_docs.md">https://github.com/appium/ruby_lib/blob/master/docs/ios_docs.md</a><br/>
<a href="https://ruby-china.org/topics/30154">https://ruby-china.org/topics/30154</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[App自动化测试平台搭建记录之Android模拟器/真机的配置]]></title>
    <link href="http://xuyao.club/blog/2016/07/10/app-test-automation-platform-building-record-of-how-to-setting-android-config/"/>
    <updated>2016-07-10T00:12:30+08:00</updated>
    <id>http://xuyao.club/blog/2016/07/10/app-test-automation-platform-building-record-of-how-to-setting-android-config</id>
    <content type="html"><![CDATA[<p>上一篇讲了安装appium及ios的配置，如果没看过这篇文章，建议先看一下，<a href="http://www.jianshu.com/p/8ac5491436b2">传送门</a>
既然是配置Android模拟器，那么Java和Android sdk的安装是必不可少的了</p>

<!-- more -->


<h4>安装Java环境</h4>

<p>安装Java环境就不多讲了，大家各显神通吧</p>

<h4>安装Android SDK</h4>

<p>到Android<a href="https://developer.android.com/studio/index.html">官网</a>，下载一个mac版的sdk,解压出来
进入tools文件夹，执行android文件，出现如下界面，选择需要安装的版本
<img src="http://7xjibn.com1.z0.glb.clouddn.com/android_sdk_download.png" alt="android_sdk_download" />
下载完成后,进入android sdk目录下面执行</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">android</span> <span class="n">avd</span>
</span></code></pre></td></tr></table></div></figure>


<p>打开android avd管理界面，添加一个avd设备
<img src="http://7xjibn.com1.z0.glb.clouddn.com/avd_manger.png" alt="avd_manger" />
<img src="http://7xjibn.com1.z0.glb.clouddn.com/create_avd.png" alt="create_avd" />
新建完成后，可以启动看一下android 虚拟设备<br/>
最后进入platform-tools使用命令，查看当前的android可用设备
如果是真机测试的话，使用USB线连接电脑，打开开发者模式，同意此电脑连接设备，appium启动时,会查找当前可用的android设备</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">adb</span> <span class="n">devices</span>
</span><span class='line'><span class="c1">#这里会显示当前可用的android设备</span>
</span><span class='line'><span class="no">List</span> <span class="n">of</span> <span class="n">devices</span> <span class="n">attached</span>
</span><span class='line'><span class="mi">88</span><span class="no">EKBME225K8</span>  <span class="n">device</span>
</span></code></pre></td></tr></table></div></figure>


<p>最后配置环境变量，环境变量包括JAVA_HOME和ANDROID_HOME
编辑.profile（如果安装了zshrc，应该是.zshrc）
添加以下代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">export</span> <span class="no">ANDROID_HOME</span><span class="o">=</span><span class="sr">/Users/xu</span><span class="n">yao</span><span class="o">/</span><span class="no">Downloads</span><span class="o">/</span><span class="n">android</span><span class="o">-</span><span class="n">sdk</span><span class="o">-</span><span class="n">macosx</span>
</span><span class='line'><span class="n">export</span> <span class="no">JAVA_HOME</span><span class="o">=</span><span class="sr">/Library/</span><span class="no">Java</span><span class="o">/</span><span class="no">JavaVirtualMachines</span><span class="o">/</span><span class="n">jdk1</span><span class="o">.</span><span class="mi">8</span><span class="o">.</span><span class="mo">0_71</span><span class="o">.</span><span class="n">jdk</span><span class="o">/</span><span class="no">Contents</span><span class="o">/</span><span class="no">Home</span>
</span><span class='line'><span class="no">PATH</span><span class="o">=</span><span class="vg">$PATH</span><span class="ss">:/</span><span class="n">usr</span><span class="o">/</span><span class="n">local</span><span class="o">/</span><span class="n">share</span><span class="o">/</span><span class="n">npm</span><span class="o">/</span><span class="n">bin</span><span class="o">/</span>
</span><span class='line'><span class="no">PATH</span><span class="o">=</span><span class="vg">$PATH</span><span class="p">:</span><span class="vg">$ANDROID_HOME</span><span class="o">/</span><span class="n">build</span><span class="o">-</span><span class="n">tools</span>
</span><span class='line'><span class="no">PATH</span><span class="o">=</span><span class="vg">$PATH</span><span class="p">:</span><span class="vg">$ANDROID_HOME</span><span class="o">/</span><span class="n">platform</span><span class="o">-</span><span class="n">tools</span>
</span><span class='line'><span class="no">PATH</span><span class="o">=</span><span class="vg">$PATH</span><span class="p">:</span><span class="vg">$ANDROID_HOME</span><span class="o">/</span><span class="n">tools</span>
</span><span class='line'><span class="n">export</span> <span class="no">PATH</span>
</span></code></pre></td></tr></table></div></figure>


<p> <br/>
保存后，为使其生效，需要重新sources一下,source .profile(.zshrc)<br/>
输出一下，检查是否成功</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">echo</span> <span class="vg">$ANDROID_HOME</span>
</span><span class='line'><span class="sr">/Users/xu</span><span class="n">yao</span><span class="o">/</span><span class="no">Downloads</span><span class="o">/</span><span class="n">android</span><span class="o">-</span><span class="n">sdk</span><span class="o">-</span><span class="n">macosx</span>
</span><span class='line'><span class="n">echo</span> <span class="vg">$JAVA_HOME</span>
</span><span class='line'><span class="sr">/Library/</span><span class="no">Java</span><span class="o">/</span><span class="no">JavaVirtualMachines</span><span class="o">/</span><span class="n">jdk1</span><span class="o">.</span><span class="mi">8</span><span class="o">.</span><span class="mo">0_71</span><span class="o">.</span><span class="n">jdk</span><span class="o">/</span><span class="no">Contents</span><span class="o">/</span><span class="no">Home</span>
</span></code></pre></td></tr></table></div></figure>


<p>一切准备就绪，接下来就开始在appium里配置android信息了
<img src="http://7xjibn.com1.z0.glb.clouddn.com/android_config.png" alt="android_config" />
platform Versiont选择的时候，如果是真机测试时，确定所选版本和机子上的android版本一样，否则会报错。
配置完成后，接下来就是启动server和client,这里的步骤一ios是一样的，具体可查看上一篇文章，截一个android版本的client启动成功的Inspector gui的图
<img src="http://7xjibn.com1.z0.glb.clouddn.com/android_inspect.png" alt="img" /></p>

<h6>注意的地方</h6>

<p>如果启动client的时候报下面的错</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="no">MJSONWP</span><span class="o">]</span> <span class="no">Encountered</span> <span class="n">internal</span> <span class="n">error</span> <span class="n">running</span> <span class="ss">command</span><span class="p">:</span> <span class="ss">Error</span><span class="p">:</span> <span class="no">Could</span> <span class="ow">not</span> <span class="n">find</span> <span class="n">a</span> <span class="n">connected</span> <span class="no">Android</span> <span class="n">device</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>说明client端找不到可以连接的android设备，检查一下avd是否启动或者真机连接是否正确</p>

<h6>参考资料</h6>

<p><a href="https://developer.android.com/studio/index.html">https://developer.android.com/studio/index.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[App自动化测试平台搭建记录之appium安装及ios模拟器/真机的配置]]></title>
    <link href="http://xuyao.club/blog/2016/07/09/app-test-automation-platform-building-record-of-how-to-install-appium-and-setting-ios-config/"/>
    <updated>2016-07-09T21:29:56+08:00</updated>
    <id>http://xuyao.club/blog/2016/07/09/app-test-automation-platform-building-record-of-how-to-install-appium-and-setting-ios-config</id>
    <content type="html"><![CDATA[<p>上一篇讲了什么是appium，这次讲一下如何安装appium，及怎样配置ios/android的模拟器/真机</p>

<h4>系统选择</h4>

<p>因为要跑ios的包的，所以我们肯定需要apple的系统来支持，而且ios版的appium也支持android，这样就完美了。</p>

<!-- more -->


<h6>iOS必备条件</h6>

<ul>
<li>Mac OS X 10.10 or 更高, 建议使用10.11.1</li>
<li>XCode >= 6.0, 7.1.1</li>
<li>Apple Developer Tools (iPhone simulator SDK, command line tools)</li>
</ul>


<h6>Android必备条件</h6>

<ul>
<li><a href="http://developer.android.com/">Android SDK</a> API >= 17 (Additional features require 18/19)</li>
</ul>


<h4>安装appium</h4>

<p>appium服务器是使用node.js跑的,所以要确保你机子上安装了node.js</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">brew</span> <span class="n">install</span> <span class="n">node</span> <span class="c1">#安装nodejs</span>
</span><span class='line'><span class="n">npm</span> <span class="n">install</span> <span class="o">-</span><span class="n">g</span> <span class="n">appium</span> <span class="c1">#安装appium</span>
</span><span class='line'><span class="n">appium</span>  <span class="c1">#启动appium</span>
</span></code></pre></td></tr></table></div></figure>


<p>当然你还可以下载一个包，直接安装，<a href="https://bitbucket.org/appium/appium.app/downloads/">点击下载</a>
如果不确实appium是否安装好，可以使用appium-doctor插件检测依赖环境是否安装成功</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">npm</span> <span class="n">install</span> <span class="o">-</span><span class="n">g</span> <span class="n">appium</span><span class="o">-</span><span class="n">doctor</span> <span class="c1"># 安装appium-doctor</span>
</span><span class='line'><span class="n">appium</span><span class="o">-</span><span class="n">doctor</span> <span class="c1">#如果安装成功，会显示以下数据</span>
</span><span class='line'><span class="n">info</span> <span class="no">AppiumDoctor</span> <span class="c1">### Diagnostic starting ###</span>
</span><span class='line'><span class="n">info</span> <span class="no">AppiumDoctor</span>  <span class="err">✔</span> <span class="no">Xcode</span> <span class="n">is</span> <span class="n">installed</span> <span class="ss">at</span><span class="p">:</span> <span class="sr">/Applications/</span><span class="no">Xcode</span><span class="o">.</span><span class="n">app</span><span class="o">/</span><span class="no">Contents</span><span class="o">/</span><span class="no">Developer</span>
</span><span class='line'><span class="n">info</span> <span class="no">AppiumDoctor</span>  <span class="err">✔</span> <span class="no">Xcode</span> <span class="no">Command</span> <span class="no">Line</span> <span class="no">Tools</span> <span class="n">are</span> <span class="n">installed</span><span class="o">.</span>
</span><span class='line'><span class="n">info</span> <span class="no">AppiumDoctor</span>  <span class="err">✔</span> <span class="no">DevToolsSecurity</span> <span class="n">is</span> <span class="n">enabled</span><span class="o">.</span>
</span><span class='line'><span class="n">info</span> <span class="no">AppiumDoctor</span>  <span class="err">✔</span> <span class="no">The</span> <span class="no">Authorization</span> <span class="no">DB</span> <span class="n">is</span> <span class="n">set</span> <span class="n">up</span> <span class="n">properly</span><span class="o">.</span>
</span><span class='line'><span class="n">info</span> <span class="no">AppiumDoctor</span>  <span class="err">✔</span> <span class="no">The</span> <span class="no">Node</span><span class="o">.</span><span class="n">js</span> <span class="n">binary</span> <span class="n">was</span> <span class="n">found</span> <span class="ss">at</span><span class="p">:</span> <span class="sr">/usr/</span><span class="n">local</span><span class="o">/</span><span class="n">bin</span><span class="o">/</span><span class="n">node</span>
</span><span class='line'><span class="n">info</span> <span class="no">AppiumDoctor</span>  <span class="err">✔</span> <span class="no">HOME</span> <span class="n">is</span> <span class="n">set</span> <span class="ss">to</span><span class="p">:</span> <span class="sr">/Users/xu</span><span class="n">yao</span>
</span><span class='line'><span class="n">info</span> <span class="no">AppiumDoctor</span>  <span class="err">✔</span> <span class="no">ANDROID_HOME</span> <span class="n">is</span> <span class="n">set</span> <span class="ss">to</span><span class="p">:</span> <span class="sr">/Users/xu</span><span class="n">yao</span><span class="o">/</span><span class="no">Downloads</span><span class="o">/</span><span class="n">android</span><span class="o">-</span><span class="n">sdk</span><span class="o">-</span><span class="n">macosx</span>
</span><span class='line'><span class="n">info</span> <span class="no">AppiumDoctor</span>  <span class="err">✔</span> <span class="no">JAVA_HOME</span> <span class="n">is</span> <span class="n">set</span> <span class="ss">to</span><span class="p">:</span> <span class="sr">/Library/</span><span class="no">Java</span><span class="o">/</span><span class="no">JavaVirtualMachines</span><span class="o">/</span><span class="n">jdk1</span><span class="o">.</span><span class="mi">8</span><span class="o">.</span><span class="mo">0_71</span><span class="o">.</span><span class="n">jdk</span><span class="o">/</span><span class="no">Contents</span><span class="o">/</span><span class="no">Home</span>
</span><span class='line'><span class="n">info</span> <span class="no">AppiumDoctor</span>  <span class="err">✔</span> <span class="n">adb</span> <span class="n">exists</span> <span class="ss">at</span><span class="p">:</span> <span class="sr">/Users/xu</span><span class="n">yao</span><span class="o">/</span><span class="no">Downloads</span><span class="o">/</span><span class="n">android</span><span class="o">-</span><span class="n">sdk</span><span class="o">-</span><span class="n">macosx</span><span class="o">/</span><span class="n">platform</span><span class="o">-</span><span class="n">tools</span><span class="o">/</span><span class="n">adb</span>
</span><span class='line'><span class="n">info</span> <span class="no">AppiumDoctor</span>  <span class="err">✔</span> <span class="n">android</span> <span class="n">exists</span> <span class="ss">at</span><span class="p">:</span> <span class="sr">/Users/xu</span><span class="n">yao</span><span class="o">/</span><span class="no">Downloads</span><span class="o">/</span><span class="n">android</span><span class="o">-</span><span class="n">sdk</span><span class="o">-</span><span class="n">macosx</span><span class="o">/</span><span class="n">tools</span><span class="o">/</span><span class="n">android</span>
</span><span class='line'><span class="n">info</span> <span class="no">AppiumDoctor</span>  <span class="err">✔</span> <span class="n">emulator</span> <span class="n">exists</span> <span class="ss">at</span><span class="p">:</span> <span class="sr">/Users/xu</span><span class="n">yao</span><span class="o">/</span><span class="no">Downloads</span><span class="o">/</span><span class="n">android</span><span class="o">-</span><span class="n">sdk</span><span class="o">-</span><span class="n">macosx</span><span class="o">/</span><span class="n">tools</span><span class="o">/</span><span class="n">emulator</span>
</span><span class='line'><span class="n">info</span> <span class="no">AppiumDoctor</span> <span class="c1">### Diagnostic completed, no fix needed. ###</span>
</span><span class='line'><span class="n">info</span> <span class="no">AppiumDoctor</span>
</span><span class='line'><span class="n">info</span> <span class="no">AppiumDoctor</span> <span class="no">Everything</span> <span class="n">looks</span> <span class="n">good</span><span class="p">,</span> <span class="n">bye!</span>
</span><span class='line'><span class="n">info</span> <span class="no">AppiumDoctor</span>
</span></code></pre></td></tr></table></div></figure>


<p>好了以上就是安装appium的步骤，安装好，就可以启动了，启动后的界面如下
<img src="http://7xjibn.com1.z0.glb.clouddn.com/CDF57F68-BBAE-496C-B12D-DA3F69B8A77D.png" alt="CDF57F68-BBAE-496C-B12D-DA3F69B8A77D.png" /></p>

<h4>iOS模拟器/真机信息配置</h4>

<p>正常情况下apple的包是.ipa文件，那里因为所有的ios设备使用的都的ARM处理器，但是我们现在配置的是模拟器的设备，而模拟器是基于Intel处理器,处理架构不一样，所以在编辑生成包的时候请选择.app文件，请看下图的配置参数
<img src="http://7xjibn.com1.z0.glb.clouddn.com/apple-setting.png" alt="apple-setting" />
App path就是apple包的路径<br/>
BunleID就是苹果开发的bundle identifier，仅在真机测试时勾上并填写<br/>
UDID苹果设备的唯一ID，仅在真机测试时勾上并填写<br/>
Force Device 要测试的iphone设备
Platform Version 要测试的iphone的版本好(设备和版本号一定要匹配)
以上配置好后，点击launch按钮，启动appium服务，启动成功后，可看到如下信息</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="no">MJSONWP</span><span class="o">]</span> <span class="no">Responding</span> <span class="n">to</span> <span class="n">client</span> <span class="n">with</span> <span class="n">driver</span><span class="o">.</span><span class="n">getStatus</span><span class="p">()</span> <span class="ss">result</span><span class="p">:</span> <span class="p">{</span><span class="s2">&quot;build&quot;</span><span class="p">:{</span><span class="s2">&quot;version&quot;</span><span class="ss">:&quot;1.5.3&quot;</span><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="o">[</span><span class="no">HTTP</span><span class="o">]</span> <span class="o">&lt;--</span> <span class="no">GET</span> <span class="sr">/wd/</span><span class="n">hub</span><span class="o">/</span><span class="n">status</span> <span class="mi">200</span> <span class="mi">26</span> <span class="n">ms</span> <span class="o">-</span> <span class="mi">83</span>
</span></code></pre></td></tr></table></div></figure>


<p>接下来点击那个类似搜索的按钮来启动client端<br/>
如果启动的时候报如下错误</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="no">MJSONWP</span><span class="o">]</span> <span class="no">Encountered</span> <span class="n">internal</span> <span class="n">error</span> <span class="n">running</span> <span class="ss">command</span><span class="p">:</span> <span class="ss">Error</span><span class="p">:</span> <span class="no">Could</span> <span class="ow">not</span> <span class="n">find</span> <span class="n">a</span> <span class="n">device</span> <span class="n">to</span> <span class="n">launch</span><span class="o">.</span> <span class="no">You</span> <span class="n">requested</span> <span class="s1">&#39;iPhone 6 (9.3 Simulator)&#39;</span><span class="p">,</span>
</span><span class='line'><span class="n">but</span> <span class="n">the</span> <span class="n">available</span> <span class="n">devices</span> <span class="ss">were</span><span class="p">:</span> <span class="o">[</span><span class="s2">&quot;Resizable iPad (8.2 Simulator) [341C7D49-B181-46B8-AB61-CF644C3250F1]&quot;</span><span class="p">,</span><span class="s2">&quot;Resizable iPhone (8.2 Simulator) [411D39CB-6DB6-41A9-9E6C-89CFDED27B69]&quot;</span><span class="p">,</span><span class="s2">&quot;iPad 2 (8.2 Simulator) [B3780274-2AE7-4677-831A-17CDDC92F2A5]&quot;</span><span class="p">,</span><span class="s2">&quot;iPad Air (8.2 Simulator) [C675C17C-9B79-4E57-B877-732A441F8DDA]&quot;</span><span class="p">,</span><span class="s2">&quot;iPad Retina (8.2 Simulator) [1C9FF2EF-A643-4D27-9268-4C3A4ADD8710]&quot;</span><span class="p">,</span><span class="s2">&quot;iPhone 4s (8.2 Simulator) [0AB005A2-63AD-44F8-AE80-8BFBB21BCDD2]&quot;</span><span class="p">,</span><span class="s2">&quot;iPhone 5 (8.2 Simulator) [15765CF4-96B1-4826-B397-6E23658AC89A]&quot;</span><span class="p">,</span><span class="s2">&quot;iPhone 5s (8.2 Simulator) </span>
</span></code></pre></td></tr></table></div></figure>


<p>那是因为你的设备和版本不对的原因，仔细看下log就发现了，改一下设备和版本信息重新启动<br/>
启动成功后出现如下画面，启动成功后会帮你打开Appium Inspector，可以使用Inspector查找组件路径，自此苹果的设备就配置成功了
<img src="http://7xjibn.com1.z0.glb.clouddn.com/iphone_5s_device.png" alt="iphone5" />
<img src="http://7xjibn.com1.z0.glb.clouddn.com/1796624-36371e4f4fe1beb2.jpeg" alt="Appium Inspector GUI" /></p>

<h5>参考资料</h5>

<p><a href="http://appium.io/getting-started.html?lang=zh">http://appium.io/getting-started.html?lang=zh</a><br/>
<a href="https://ruby-china.org/topics/30085">https://ruby-china.org/topics/30085</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[App自动化测试平台搭建记录之什么是appium]]></title>
    <link href="http://xuyao.club/blog/2016/07/09/app-test-automation-platform-building-record-of-what-is-appium/"/>
    <updated>2016-07-09T17:06:02+08:00</updated>
    <id>http://xuyao.club/blog/2016/07/09/app-test-automation-platform-building-record-of-what-is-appium</id>
    <content type="html"><![CDATA[<h4>前言</h4>

<p>目前我们的项目关于测试这块还是处于很初级阶段，rails后端的rspec也写的很少，app方面完全靠手动测试，基于此情况，我们决定搭建一个自动化测试平台，期望目标是移动端ios和android及h5每天定时拉取最新代码，进行部署，打包，最后进行回归测试，生成测试报告发送给测试人员，
最后流程如下所示</p>

<!-- more -->


<p><img src="http://7xjibn.com1.z0.glb.clouddn.com/appium%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B%E5%9B%BE%20%281%29.png" alt="img" /></p>

<h4>为什么选择appium作为自动化测试框架</h4>

<ul>
<li>使用标准的api形式，能够同时支持ios，android，h5,接口保持统一，减少开发维护成本</li>
<li>你可以使用任何你喜欢的开发工具，及支持多种脚本语言(ruby/python/java/php/javascript/C#/ Clojure/Perl)</li>
<li>你可以使用任何的测试框架

<h4>What is the Appium</h4>

<p>具体什么是appium呢，引用了官方的一段话：
Appium is an open source test automation framework for use with native, <a href="http://appium.io/slate/en/master/#hybrid.md">hybrid</a> and mobile web apps.</p></li>
</ul>


<h4>Appium Concepts（appium理念）</h4>

<p><strong>Client/Server 设计风格</strong> <br/>
   Appium本质是一个核心webserver,暴露一些REST API与手机设备交互, 而且之间通信是一标准的HTTP协议，client的test code语言几乎现在主流的语言都支持，写测试用例比较方便，下图是它servre端的GUI</p>

<p><img src="http://7xjibn.com1.z0.glb.clouddn.com/CDF57F68-BBAE-496C-B12D-DA3F69B8A77D.png" alt="CDF57F68-BBAE-496C-B12D-DA3F69B8A77D.png" /></p>

<p><strong>Session(会话)</strong><br/>
  自动化每次都会在一个会话里面进行，client每次都会发送一个post /session 请求，服务器根据客户端信息起一个automation session和返回一个session ID用于后续操作</p>

<p><strong>Desired Capabilities</strong><br/>
  一组hash参数，告诉server端我们需要启动一个的怎样automation session,不同设备参数不同
这是iOs一个demo</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">capabilities</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="s1">&#39;appium-version&#39;</span><span class="p">:</span> <span class="s1">&#39;1.0&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;platformName&#39;</span><span class="p">:</span> <span class="s1">&#39;iOS&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;platformVersion&#39;</span><span class="p">:</span> <span class="s1">&#39;8.2&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;deviceName&#39;</span><span class="p">:</span> <span class="s1">&#39;iPhone 6&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;app&#39;</span><span class="p">:</span> <span class="s2">&quot;/Users/xuyao/Downloads/Cloudoc-Patient.app&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这是android的样本</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">capabilities</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="s1">&#39;appium-version&#39;</span><span class="p">:</span> <span class="s1">&#39;1.0&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;platformName&#39;</span><span class="p">:</span> <span class="s1">&#39;Android&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;platformVersion&#39;</span><span class="p">:</span> <span class="s1">&#39;5.1&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;deviceName&#39;</span><span class="p">:</span> <span class="s1">&#39;test&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;app&#39;</span><span class="p">:</span> <span class="s1">&#39;/Users/xuyao/Downloads/Yydys0627.apk&#39;</span><span class="p">,</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Appium Server</strong><br/>
  server端是用node.js写的</p>

<p><strong>Appium Clients</strong><br/>
  客户端的库有很多( Java, Ruby, Python, PHP, JavaScript, and C#)，这些都对WebDriver封装扩展过,所以不需要找个WebDriver client来做这些东西,如果使用ruby语言来写脚本，ruby里有个<a href="https://rubygems.org/gems/appium_lib">appium_lib</a> gem，里面集成了很多现成的方法，可以再安装一个<a href="https://github.com/appium/ruby_console">appium_console</a>，直接打开console进行调试</p>

<h4>Appium Inspector</h4>

<p>在控件台里面获取页面元素比较麻烦，往往需要一直定位，Appium提供了一个比较友好的GUI给我们操作，而且操作起来还容易，大大减少了我们查找元素的时间
<img src="http://7xjibn.com1.z0.glb.clouddn.com/1796624-36371e4f4fe1beb2.jpeg" alt="Appium Inspector GUI" /></p>

<h6>参考资料</h6>

<p><a href="http://appium.io/">http://appium.io/</a><br/>
<a href="https://github.com/appium/ruby_console">https://github.com/appium/ruby_console</a><br/>
<a href="https://github.com/appium/ruby_lib">https://github.com/appium/ruby_lib</a><br/>
<a href="https://ruby-china.org/topics/30074">https://ruby-china.org/topics/30074</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[About Sso in Rails]]></title>
    <link href="http://xuyao.club/blog/2016/04/06/about-sso-in-rails/"/>
    <updated>2016-04-06T16:19:32+08:00</updated>
    <id>http://xuyao.club/blog/2016/04/06/about-sso-in-rails</id>
    <content type="html"><![CDATA[<h3>前言</h3>

<p>目前业务越来越多，很多业务可能需要拆分成不同的应用，不同的应用之间如何互享用户信息，这时就需要用到单点登录(Single Sign On），简称为 SSO。</p>

<p>这里主要针对doorkeeper作讲解</p>

<!-- more -->


<p><img src="http://i2.piimg.com/285bc33bd4eab4b1.png" alt="查看图" /></p>

<h3>需要用到的插件</h3>

<ul>
<li><a href="https://github.com/doorkeeper-gem/doorkeeper">Doorkeeper</a>  (<a href="http://oauth.net/2/">Oauth 2.0</a>协议的认证授权服务)</li>
<li>Grape (提供 Resource Server APi)</li>
<li>Devise (提供登录，暂时可能用不到)</li>
</ul>


<h3>需要用到的角色</h3>

<ul>
<li>Resource Owner (用户角色)</li>
<li>Clients (第三方角色)</li>
<li>Authorization Server (授权服务)</li>
<li>Resource Server (用户信息读写服务,api形式)<br/>
详情可查看<a href="https://github.com/jeansfish/RFC6749.zh-cn/blob/master/Section01/1.1.md">RFC6749</a></li>
</ul>


<h3>Authorization Server构建</h3>

<p>安装doorkeeper及初始模型的建立</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;doorkeeper&#39;</span>
</span><span class='line'><span class="c1">#bundle install</span>
</span><span class='line'><span class="n">rails</span> <span class="n">generate</span> <span class="ss">doorkeeper</span><span class="p">:</span><span class="n">install</span>
</span><span class='line'><span class="n">rails</span> <span class="n">generate</span> <span class="ss">doorkeeper</span><span class="p">:</span><span class="n">migration</span>
</span><span class='line'><span class="n">rake</span> <span class="ss">db</span><span class="p">:</span><span class="n">migrate</span>
</span></code></pre></td></tr></table></div></figure>


<p>配置doorkeeper来提供resource_owner的model及授权</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Doorkeeper</span><span class="o">.</span><span class="n">configure</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">resource_owner_authenticator</span> <span class="k">do</span>
</span><span class='line'>    <span class="no">Patient</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="nb">id</span><span class="p">:</span> <span class="n">session</span><span class="o">[</span><span class="ss">:patient_id</span><span class="o">]</span><span class="p">,</span> <span class="ss">authentication_token</span><span class="p">:</span> <span class="n">session</span><span class="o">[</span><span class="ss">:patient_auth_token</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">first</span> <span class="o">||</span> <span class="n">redirect_to</span><span class="p">(</span><span class="n">login_url</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面操作会生成下面几张表</p>

<ul>
<li>oauth_applications  第三方(clients)表</li>
<li>oauth_access_grants 用户授权code表</li>
<li>oauth_access_tokens 授权服务token表</li>
</ul>


<h3>添加 Applications</h3>

<p>授权前需要添加第三方应用的信息，doorkeeper提供了一个增加Clients的功能
<a href="http://localhost:3001/oauth/applications">点击查看</a></p>

<h3>Authorization Grant Code Flow</h3>

<ul>
<li> Resource Owner请求Client的Redirection URI</li>
<li> Client转到Authorization Server</li>
<li> Resource Owner 确认授权</li>
<li> Authorization Server验证用户</li>
<li> Authorization Server返回Authorization Code</li>
<li> Resource Owner返回Redirection URI &amp; Authorization Code</li>
<li> Client拿到Authorization Code请求Access Token</li>
</ul>


<p>具体<a href="https://tools.ietf.org/ht%EF%BC%8Cml/draft-ietf-oauth-v2-22#section-4.1">点击查看</a></p>

<h3>获取Access Token</h3>

<p>上面介绍了oauth 2的授权流程，得到Client信息后，就可以去Authorization Server获取Token,通过调用/oauth/token接口获得Token<br/>
具体可以看  <a href="http://localhost:3001/oauth/applications">模拟操作</a></p>

<h3>Resource Server构建</h3>

<p>使用grape作Resource Server的接口,暂时可能需要如下接口</p>

<p>1，获取用户信息<br/>
2，修改用户信息<br/>
查看swagger<a href="http://localhost:3001/documentation/api_v1">模拟操作</a></p>

<h3>说明及问题</h3>

<ol>
<li>把Authorization Server部署在哪里

<blockquote><p>部署在主项目里面，这样可以省去Authorization Server的登录，因为App登录后，Authorization Server可以通过session获得用户信息</p></blockquote></li>
<li>目前只在App内授权，不提供外部登录

<blockquote><p>我们的其它应用都是App内的页面，而且在外部有些可能不能用，所以在App里授权</p></blockquote></li>
<li>Api部分可以不做验证</li>
</ol>


<h4>参考资料</h4>

<p><a href="https://github.com/doorkeeper-gem/doorkeeper">https://github.com/doorkeeper-gem/doorkeeper</a><br/>
<a href="https://github.com/sethherr/grape-doorkeeper">https://github.com/sethherr/grape-doorkeeper</a><br/>
<a href="https://blog.yorkxin.org/posts/2013/10/10/oauth2-tutorial-grape-api-doorkeeper/">https://blog.yorkxin.org/posts/2013/10/10/oauth2-tutorial-grape-api-doorkeeper/</a><br/>
<a href="http://tools.ietf.org/html/rfc6749">http://tools.ietf.org/html/rfc6749</a> <br/>
<a href="https://github.com/jeansfish/RFC6749.zh-cn">https://github.com/jeansfish/RFC6749.zh-cn</a><br/>
<a href="https://ruby-china.org/topics/15396">https://ruby-china.org/topics/15396</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[About Rails Cache]]></title>
    <link href="http://xuyao.club/blog/2016/03/24/about-rails-cache/"/>
    <updated>2016-03-24T10:05:39+08:00</updated>
    <id>http://xuyao.club/blog/2016/03/24/about-rails-cache</id>
    <content type="html"><![CDATA[<p>在项目中经常会存储一些短时候内比较重要的数据，或者一些临时数据，这种数据以前一般我都把它
存到redis中，后来想想如果不是很重要的临时数据就没必要往redis里放了，直接用cache可能更方便</p>

<h3>ActiveSupport::Cache::Store</h3>

<p>它是一个抽象类，有很多cache store的实现
rails中的这个类提供了和缓存交互的很多基本的方法，包括(read,write,delete,exist?,fetch)，下面说下具体实现</p>

<h3>ActiveSupport::Cache::FileStore</h3>

<p>先说一下FileStore,这种存储方式Rails默认的存储方式，他是将数据存储到系统文件,默认将文件存储到项目的/tmp/cache下面，你可以修改它的存储路径</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">cache_store</span> <span class="o">=</span> <span class="ss">:file_store</span><span class="p">,</span> <span class="s2">&quot;/path/to/cache/directory&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面说FileStore是Rails默认的存储方式，看下面这句代码就知道了</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Rails</span><span class="o">.</span><span class="n">cache</span><span class="o">.</span><span class="n">class</span>  <span class="o">=&gt;</span> <span class="no">ActiveSupport</span><span class="o">::</span><span class="no">Cache</span><span class="o">::</span><span class="no">FileStore</span>
</span></code></pre></td></tr></table></div></figure>


<!-- more -->


<p>cache有几种常用的方法</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Rails</span><span class="o">.</span><span class="n">cache</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s2">&quot;name&quot;</span><span class="p">,</span><span class="s2">&quot;peter&quot;</span><span class="p">)</span>
</span><span class='line'><span class="no">Rails</span><span class="o">.</span><span class="n">cache</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="s2">&quot;name&quot;</span><span class="p">)</span>  <span class="o">=&gt;</span> <span class="s2">&quot;peter&quot;</span>
</span><span class='line'><span class="no">Rails</span><span class="o">.</span><span class="n">cache</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="s2">&quot;age&quot;</span><span class="p">)</span>  <span class="o">=&gt;</span> <span class="kp">nil</span>
</span></code></pre></td></tr></table></div></figure>


<p>cache中的key都是string型，而且区分大小写的，Hash和数据也或以当作key,上面的代码的key也可以用hash表示</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Rails</span><span class="o">.</span><span class="n">cache</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="ss">:name</span><span class="p">)</span>  <span class="o">=&gt;</span> <span class="s2">&quot;peter&quot;</span>
</span><span class='line'><span class="no">Rails</span><span class="o">.</span><span class="n">cache</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="ss">:name</span><span class="p">)</span> <span class="o">==</span> <span class="no">Rails</span><span class="o">.</span><span class="n">cache</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="s2">&quot;name&quot;</span><span class="p">)</span>  <span class="o">=&gt;</span> <span class="kp">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果你的cache是和其它程序公用的存储，你可以给他定义一个namespace，一旦namespace定义，就会在key前面加了个前缀
其它一些参数
:compress 是否压缩缓存，
:compress_threshold 和compress一起使用，设定一个阈值，低于这个值就不压缩缓存。默认为 16 KB。
:expires_in 为缓存记录设定一个过期时间，单位为秒，过期后把记录从缓存中删除。</p>

<h3>ActiveSupport::Cache::MemoryStore</h3>

<p>这种存储方式是把数据存储在内存中，而且存储空间的大小由:size决定，默认为32M，如果超出分配的大小，系统会清理缓存，把最不常使用的记录删除。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">cache</span> <span class="o">=</span> <span class="no">ActiveSupport</span><span class="o">::</span><span class="no">Cache</span><span class="o">::</span><span class="no">MemoryStore</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">cache</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s2">&quot;name&quot;</span><span class="p">,</span><span class="s2">&quot;peter&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">cache</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="s2">&quot;name&quot;</span><span class="p">)</span>  <span class="o">=&gt;</span> <span class="s2">&quot;peter&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>ActiveSupport::Cache::MemCacheStore</h3>

<p>这种存储方式使用 Danga 开发的 memcached 服务器，为程序提供一个中心化的缓存存储。Rails 默认使用附带安装的 dalli gem 实现这种存储方式。这是目前在生产环境中使用最广泛的缓存存储方式，可以提供单个缓存存储，或者共享的缓存集群，性能高，冗余度低。</p>

<p>初始化时要指定集群中所有 memcached 服务器的地址。如果没有指定地址，默认运行在本地主机的默认端口上，这对大型网站来说不是个好主意。</p>

<p>在这种缓存存储中使用 write 和 fetch 方法还可指定两个额外的选项，充分利用 memcached 的特有功能。指定 :raw 选项可以直接把没有序列化的数据传给 memcached 服务器。在这种类型的数据上可以使用 memcached 的原生操作，例如 increment 和 decrement。如果不想让 memcached 覆盖已经存在的记录，可以指定 :unless_exist 选项。
上面的这种我也没用过，只是摘了别人一段话来补补。。。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby中include和extend的比较]]></title>
    <link href="http://xuyao.club/blog/2015/06/29/include-vs-extend-in-ruby/"/>
    <updated>2015-06-29T12:21:35+08:00</updated>
    <id>http://xuyao.club/blog/2015/06/29/include-vs-extend-in-ruby</id>
    <content type="html"><![CDATA[<p>本文翻译,改编自<a href="http://www.railstips.org/blog/archives/2009/05/15/include-vs-extend-in-ruby/">Include vs Extend in Ruby</a></p>

<p>在类中引用一个模块,有两种方式,一种是include,另一种是extend,两种的大致区别就是:<br/>
<strong><em>include是给class增加一个实例方法,而extend是增加一个类方法</em>  </strong><br/>
我们看一下小例子.</p>

<!-- more -->


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Foo</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">foo</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s1">&#39;heyyyyoooo!&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Bar</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Foo</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Bar</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">foo</span> <span class="c1"># heyyyyoooo!</span>
</span><span class='line'><span class="no">Bar</span><span class="o">.</span><span class="n">foo</span> <span class="c1"># NoMethodError: undefined method ‘foo’ for Bar:Class</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Baz</span>
</span><span class='line'>  <span class="kp">extend</span> <span class="no">Foo</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Baz</span><span class="o">.</span><span class="n">foo</span> <span class="c1"># heyyyyoooo!</span>
</span><span class='line'><span class="no">Baz</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">foo</span> <span class="c1"># NoMethodError: undefined method ‘foo’ for #&lt;Baz:0x1e708&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>如你所见,include生成了一个类的实例foo方法,而extend生成了一个类本身的类方法.</p>

<h5>Include 例子</h5>

<p>如果你想了解更多module之间使用include共享方法,你可以阅读我另一则文章在<a href="http://railstips.org/2009/4/20/how-to-add-simple-permissions-into-your-simple-app-also-thoughtbot-rules">how I added simple permissions</a>,那篇文章中permissions模块被好几个models引入,所以可以共享方法,这就是我要说的,所以你想了解更多可以查看那篇文章</p>

<h5>一个普遍的共识</h5>

<p>虽然include是增加一个实例方法,但是有一个普遍的共识,你以后会明白在ruby中使用include即可以增加类方法也可以增加实例方法,原因就是include有一个self.included的钩子方法,你可以用它来修改类中对于模块的引入,据我所知,extend没有钩子方法(这是作者错误的想法,见下面说明),不过这是有争议的,但是因为经常使用所以我想我会提到它,让我们看个小例子</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Foo</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">included</span><span class="p">(</span><span class="n">base</span><span class="p">)</span>
</span><span class='line'>    <span class="n">base</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span><span class="no">ClassMethods</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">module</span> <span class="nn">ClassMethods</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">bar</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s1">&#39;class method&#39;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">foo</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s1">&#39;instance method&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Baz</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Foo</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Baz</span><span class="o">.</span><span class="n">bar</span> <span class="c1"># class method</span>
</span><span class='line'><span class="no">Baz</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">foo</span> <span class="c1"># instance method</span>
</span><span class='line'><span class="no">Baz</span><span class="o">.</span><span class="n">foo</span> <span class="c1"># NoMethodError: undefined method ‘foo’ for Baz:Class</span>
</span><span class='line'><span class="no">Baz</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">bar</span> <span class="c1"># NoMethodError: undefined method ‘bar’ for #&lt;Baz:0x1e3d4&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>但是rails现在引入了<a href="http://api.rubyonrails.org/classes/ActiveSupport/Concern.html">ActiveSupport::Concern</a>,上面的方法就可以写成这样</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Foo</span>
</span><span class='line'>  <span class="kp">extend</span> <span class="no">ActiveSupport</span><span class="o">::</span><span class="no">Concern</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">module</span> <span class="nn">ClassMethods</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">bar</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s1">&#39;class method&#39;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">foo</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s1">&#39;instance method&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Baz</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Foo</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Baz</span><span class="o">.</span><span class="n">bar</span> <span class="c1"># class method</span>
</span><span class='line'><span class="no">Baz</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">foo</span> <span class="c1"># instance method</span>
</span><span class='line'><span class="no">Baz</span><span class="o">.</span><span class="n">foo</span> <span class="c1"># NoMethodError: undefined method ‘foo’ for Baz:Class</span>
</span><span class='line'><span class="no">Baz</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">bar</span> <span class="c1"># NoMethodError: undefined method ‘bar’ for #&lt;Baz:0x1e3d4&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h5>说明</h5>

<p>上面原作者说extend没有hook是错误的,extend其实有一个叫self.extended的方法,作用和include中的self.included是差不多的,可看下面的例子</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Foo</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">extended</span><span class="p">(</span><span class="n">klass</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;extended by class </span><span class="si">#{</span><span class="n">klass</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Baz</span>
</span><span class='line'>  <span class="kp">extend</span> <span class="no">Foo</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="o">=&gt;</span> <span class="n">extended</span> <span class="n">by</span> <span class="k">class</span> <span class="nc">Baz</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[About Me]]></title>
    <link href="http://xuyao.club/blog/2015/06/05/about-me-with-ruby-code/"/>
    <updated>2015-06-05T10:49:54+08:00</updated>
    <id>http://xuyao.club/blog/2015/06/05/about-me-with-ruby-code</id>
    <content type="html"><![CDATA[<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Person</span>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:birthday</span><span class="p">,</span> <span class="ss">:gender</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span><span class="n">birthday</span><span class="p">,</span><span class="n">gender</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@name</span> <span class="o">=</span> <span class="nb">name</span>
</span><span class='line'>    <span class="vi">@birthday</span> <span class="o">=</span> <span class="n">birthday</span>
</span><span class='line'>    <span class="vi">@gender</span> <span class="o">=</span> <span class="n">gender</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">company</span><span class="o">=</span> <span class="nb">name</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">company</span> <span class="o">=</span> <span class="nb">name</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">position</span><span class="o">=</span> <span class="n">position</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">position</span> <span class="o">=</span> <span class="n">position</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">hobby</span> <span class="o">*</span><span class="n">arg</span>
</span><span class='line'>    <span class="s2">&quot;I like </span><span class="si">#{</span><span class="n">arg</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;,&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">me</span> <span class="o">=</span> <span class="no">Person</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;徐耀&quot;</span><span class="p">,</span><span class="s2">&quot;1991-02-03&quot;</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="n">me</span><span class="o">.</span><span class="n">nickname</span> <span class="o">=</span> <span class="sx">%W(老徐 徐逗逗)</span>
</span><span class='line'><span class="n">me</span><span class="o">.</span><span class="n">company</span><span class="o">=</span> <span class="s2">&quot;上海微客来软件技术有限公司&quot;</span>
</span><span class='line'><span class="c1">#TODO update at 2015-7-15</span>
</span><span class='line'><span class="n">me</span><span class="o">.</span><span class="n">company</span><span class="o">=</span> <span class="s2">&quot;苏州医云健康有限公司&quot;</span>
</span><span class='line'><span class="n">me</span><span class="o">.</span><span class="n">position</span> <span class="o">=</span> <span class="s2">&quot;Ruby Engineer&quot;</span>
</span><span class='line'><span class="n">me</span><span class="o">.</span><span class="n">hobby</span> <span class="s2">&quot;coding&quot;</span><span class="p">,</span><span class="s2">&quot;reading&quot;</span><span class="p">,</span><span class="s2">&quot;music&quot;</span><span class="p">,</span><span class="s2">&quot;traveling&quot;</span><span class="p">,</span><span class="s2">&quot;grils&quot;</span>
</span><span class='line'><span class="n">me</span><span class="o">.</span><span class="n">weibo</span> <span class="o">=</span> <span class="s2">&quot;http://weibo.com/1676361452&quot;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Understand Rails Virtual Attributes]]></title>
    <link href="http://xuyao.club/blog/2015/06/04/how-to-understand-rails-virtual-attributes/"/>
    <updated>2015-06-04T16:37:50+08:00</updated>
    <id>http://xuyao.club/blog/2015/06/04/how-to-understand-rails-virtual-attributes</id>
    <content type="html"><![CDATA[<h4>在网上看到关于rails  virtual attributes 的例子,得觉挺好玩的,自己动手试一下,好叼</h4>

<p>有时候在一张表里面有两个字段,但是实际表单里其实只有一个文本框输入,比如老外的名字分first_name last_name,
在表里面是分开保存的,但其实是在一个文本框中输入的,这里使用virtal attriubtes最恰当不过了,看表结构</p>

<!-- more -->


<p>表里有first_name和full_name两个属性</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">CreateTeachers</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Migration</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">change</span>
</span><span class='line'>    <span class="n">create_table</span> <span class="ss">:teachers</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">string</span> <span class="ss">:first_name</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">string</span> <span class="ss">:last_name</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">integer</span> <span class="ss">:age</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">integer</span> <span class="ss">:gender</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">string</span> <span class="ss">:mobile</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">timestamps</span> <span class="ss">null</span><span class="p">:</span> <span class="kp">false</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p> 但是有时候在页面上不需要用两个文本框,只要一个full_name就ok</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sx">%= form_for(@teacher) do |f| %&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sx">  #只在有一个full_name 的文本框就可以</span>
</span><span class='line'><span class="sx">  &lt;div class=</span><span class="s2">&quot;field&quot;</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="sx">%= f.label :full_name %&gt;&lt;br&gt;</span>
</span><span class='line'><span class="sx">    &lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">text_field</span> <span class="ss">:full_name</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">  &lt;/div&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">div</span> <span class="n">class</span><span class="o">=</span><span class="s2">&quot;field&quot;</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="sx">%= f.label :age %&gt;&lt;br&gt;</span>
</span><span class='line'><span class="sx">    &lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">number_field</span> <span class="ss">:age</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">  &lt;/div&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">div</span> <span class="n">class</span><span class="o">=</span><span class="s2">&quot;field&quot;</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="sx">%= f.label :gender %&gt;&lt;br&gt;</span>
</span><span class='line'><span class="sx">    &lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">number_field</span> <span class="ss">:gender</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">  &lt;/div&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">div</span> <span class="n">class</span><span class="o">=</span><span class="s2">&quot;field&quot;</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="sx">%= f.label :mobile %&gt;&lt;br&gt;</span>
</span><span class='line'><span class="sx">    &lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">text_field</span> <span class="ss">:mobile</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">  &lt;/div&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">div</span> <span class="n">class</span><span class="o">=</span><span class="s2">&quot;actions&quot;</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">submit</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">  &lt;/div&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sx">% end </span><span class="o">%&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>model层可以这样写</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Teacher</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">full_name</span>
</span><span class='line'>      <span class="o">[</span><span class="n">first_name</span><span class="p">,</span> <span class="n">last_name</span><span class="o">].</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>  
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">full_name</span><span class="o">=</span> <span class="p">(</span><span class="n">full_name</span><span class="p">)</span>
</span><span class='line'>      <span class="nb">split</span> <span class="o">=</span> <span class="n">full_name</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'>      <span class="nb">self</span><span class="o">.</span><span class="n">first_name</span> <span class="o">=</span> <span class="nb">split</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
</span><span class='line'>      <span class="nb">self</span><span class="o">.</span><span class="n">last_name</span> <span class="o">=</span> <span class="nb">split</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>  
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里full_name就是一个虚拟属性(virtual attributes)
上面两个方法其实就是getter和setter(java中有这种概念)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails 中alias Alias_method Alias_method_chain的使用]]></title>
    <link href="http://xuyao.club/blog/2015/05/28/ruby-alias-methods/"/>
    <updated>2015-05-28T22:03:17+08:00</updated>
    <id>http://xuyao.club/blog/2015/05/28/ruby-alias-methods</id>
    <content type="html"><![CDATA[<h5>首先看一下alias的用法，上一个实例是明了</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Dog</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">say</span>
</span><span class='line'>          <span class="nb">puts</span>  <span class="s2">&quot;say hello&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'> <span class="k">alias</span> <span class="ss">:wang</span> <span class="ss">:say</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">dog</span> <span class="o">=</span> <span class="no">Dog</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">dog</span><span class="o">.</span><span class="n">wang</span>
</span><span class='line'>
</span><span class='line'><span class="o">=&gt;</span> <span class="n">say</span> <span class="n">hello</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>在类中可以将一个实例方法重新命名,注意的是新方法在前面，用空格格开</p>

<h5>alias_method的用法，</h5>

<p>和alias一样，只是他是module的一个私有方法，而且它的方法名可以是字符中，而alias不行，看代码</p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Dog</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">say</span>
</span><span class='line'>          <span class="nb">puts</span>  <span class="s2">&quot;say hello&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">alias_method</span> <span class="s2">&quot;wang&quot;</span><span class="p">,</span> <span class="s2">&quot;say&quot;</span>
</span><span class='line'><span class="c1">#alias_method :wang, :say</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Animal</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Dog</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="no">Anima</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">a</span><span class="o">.</span><span class="n">wang</span>
</span><span class='line'>
</span><span class='line'><span class="o">=&gt;</span><span class="n">say</span> <span class="n">hello</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h5>alias_method_chain 是ActiveSupport的一个公有实例方法，用法和alias_method是一样的，这里不举例，最后附上alias_method_chain的源码</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">alias_method_chain</span><span class="p">(</span><span class="n">target</span><span class="p">,</span> <span class="n">feature</span><span class="p">)</span>
</span><span class='line'>  <span class="c1"># Strip out punctuation on predicates or bang methods since    </span>
</span><span class='line'>  <span class="c1"># e.g. target?_without_feature is not a valid method name.    </span>
</span><span class='line'>  <span class="n">aliased_target</span><span class="p">,</span> <span class="n">punctuation</span> <span class="o">=</span> <span class="n">target</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">sub</span><span class="p">(</span><span class="sr">/([?!=])$/</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">),</span> <span class="vg">$1</span>
</span><span class='line'>  <span class="k">yield</span><span class="p">(</span><span class="n">aliased_target</span><span class="p">,</span> <span class="n">punctuation</span><span class="p">)</span> <span class="k">if</span> <span class="nb">block_given?</span>
</span><span class='line'>  <span class="n">with_method</span><span class="p">,</span> <span class="n">without_method</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">aliased_target</span><span class="si">}</span><span class="s2">_with_</span><span class="si">#{</span><span class="n">feature</span><span class="si">}#{</span><span class="n">punctuation</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">aliased_target</span><span class="si">}</span><span class="s2">_without_</span><span class="si">#{</span><span class="n">feature</span><span class="si">}#{</span><span class="n">punctuation</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="n">alias_method</span> <span class="n">without_method</span><span class="p">,</span> <span class="n">target</span>
</span><span class='line'>  <span class="n">alias_method</span> <span class="n">target</span><span class="p">,</span> <span class="n">with_method</span>
</span><span class='line'>  <span class="k">case</span>
</span><span class='line'>    <span class="k">when</span> <span class="nb">public_method_defined?</span><span class="p">(</span><span class="n">without_method</span><span class="p">)</span>
</span><span class='line'>      <span class="kp">public</span> <span class="n">target</span>
</span><span class='line'>    <span class="k">when</span> <span class="nb">protected_method_defined?</span><span class="p">(</span><span class="n">without_method</span><span class="p">)</span>
</span><span class='line'>      <span class="kp">protected</span> <span class="n">target</span>
</span><span class='line'>    <span class="k">when</span> <span class="nb">private_method_defined?</span><span class="p">(</span><span class="n">without_method</span><span class="p">)</span>
</span><span class='line'>    <span class="kp">private</span> <span class="n">target</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello Everybody]]></title>
    <link href="http://xuyao.club/blog/2015/05/26/my-first-post/"/>
    <updated>2015-05-26T17:29:27+08:00</updated>
    <id>http://xuyao.club/blog/2015/05/26/my-first-post</id>
    <content type="html"><![CDATA[<p>hello everybody, this is my first post, I'am very happy, bescuse it is successful.</p>

<p>如果想了解微信相关开发的东西请到我的<a href="http://blog.sina.com.cn/xuyao90">新浪博客</a></p>
]]></content>
  </entry>
  
</feed>
